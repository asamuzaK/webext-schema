{
  "commands.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "id": "KeyName",
          "type": "string",
          "format": "manifestShortcutKey"
        },
        {
          "$extend": "WebExtensionManifest",
          "properties": {
            "commands": {
              "type": "object",
              "optional": true,
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "UnrecognizedProperty"
                },
                "properties": {
                  "suggested_key": {
                    "type": "object",
                    "optional": true,
                    "properties": {
                      "default": {
                        "$ref": "KeyName",
                        "optional": true
                      },
                      "mac": {
                        "$ref": "KeyName",
                        "optional": true
                      },
                      "linux": {
                        "$ref": "KeyName",
                        "optional": true
                      },
                      "windows": {
                        "$ref": "KeyName",
                        "optional": true
                      },
                      "chromeos": {
                        "type": "string",
                        "optional": true
                      },
                      "android": {
                        "type": "string",
                        "optional": true
                      },
                      "ios": {
                        "type": "string",
                        "optional": true
                      },
                      "additionalProperties": {
                        "type": "string",
                        "deprecated": "Unknown platform name",
                        "optional": true
                      }
                    }
                  },
                  "description": {
                    "type": "string",
                    "preprocess": "localize",
                    "optional": true
                  }
                }
              }
            }
          }
        }
      ]
    },
    {
      "namespace": "commands",
      "description": "Use the commands API to add keyboard shortcuts that trigger actions in your extension, for example, an action to open the browser action or send a command to the xtension.",
      "permissions": [
        "manifest:commands"
      ],
      "types": [
        {
          "id": "Command",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "optional": true,
              "description": "The name of the Extension Command"
            },
            "description": {
              "type": "string",
              "optional": true,
              "description": "The Extension Command description"
            },
            "shortcut": {
              "type": "string",
              "optional": true,
              "description": "The shortcut active for this command, or blank if not active."
            }
          }
        }
      ],
      "events": [
        {
          "name": "onCommand",
          "description": "Fired when a registered command is activated using a keyboard shortcut.",
          "type": "function",
          "parameters": [
            {
              "name": "command",
              "type": "string"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "update",
          "type": "function",
          "async": true,
          "description": "Update the details of an already defined command.",
          "parameters": [
            {
              "type": "object",
              "name": "detail",
              "description": "The new description for the command.",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the command."
                },
                "description": {
                  "type": "string",
                  "optional": true,
                  "description": "The new description for the command."
                },
                "shortcut": {
                  "type": "string",
                  "format": "manifestShortcutKeyOrEmpty",
                  "optional": true
                }
              }
            }
          ]
        },
        {
          "name": "reset",
          "type": "function",
          "async": true,
          "description": "Reset a command's details to what is specified in the manifest.",
          "parameters": [
            {
              "type": "string",
              "name": "name",
              "description": "The name of the command."
            }
          ]
        },
        {
          "name": "getAll",
          "type": "function",
          "async": "callback",
          "description": "Returns all the registered extension commands for this extension and their shortcut (if active).",
          "parameters": [
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "name": "commands",
                  "type": "array",
                  "items": {
                    "$ref": "Command"
                  }
                }
              ],
              "description": "Called to return the registered commands."
            }
          ]
        }
      ]
    }
  ],
  "pkcs11.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "OptionalPermission",
          "choices": [
            {
              "type": "string",
              "enum": [
                "pkcs11"
              ]
            }
          ]
        }
      ]
    },
    {
      "namespace": "pkcs11",
      "description": "PKCS#11 module management API",
      "permissions": [
        "pkcs11"
      ],
      "functions": [
        {
          "name": "isModuleInstalled",
          "type": "function",
          "description": "checks whether a PKCS#11 module, given by name, is installed",
          "async": true,
          "parameters": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "name": "installModule",
          "type": "function",
          "description": "Install a PKCS#11 module with a given name",
          "async": true,
          "parameters": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "flags",
              "type": "integer",
              "optional": true
            }
          ]
        },
        {
          "name": "uninstallModule",
          "type": "function",
          "description": "Remove an installed PKCS#11 module from firefox",
          "async": true,
          "parameters": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "name": "getModuleSlots",
          "type": "function",
          "description": "Enumerate a module's slots, each with their name and whether a token is present",
          "async": true,
          "parameters": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        }
      ]
    }
  ],
  "content_scripts.json": [
    {
      "namespace": "contentScripts",
      "types": [
        {
          "id": "RegisteredContentScriptOptions",
          "type": "object",
          "description": "Details of a content script registered programmatically",
          "properties": {
            "matches": {
              "type": "array",
              "optional": false,
              "minItems": 1,
              "items": {
                "$ref": "manifest.MatchPattern"
              }
            },
            "excludeMatches": {
              "type": "array",
              "optional": true,
              "minItems": 1,
              "items": {
                "$ref": "manifest.MatchPattern"
              }
            },
            "includeGlobs": {
              "type": "array",
              "optional": true,
              "items": {
                "type": "string"
              }
            },
            "excludeGlobs": {
              "type": "array",
              "optional": true,
              "items": {
                "type": "string"
              }
            },
            "css": {
              "type": "array",
              "optional": true,
              "description": "The list of CSS files to inject",
              "items": {
                "$ref": "extensionTypes.ExtensionFileOrCode"
              }
            },
            "js": {
              "type": "array",
              "optional": true,
              "description": "The list of JS files to inject",
              "items": {
                "$ref": "extensionTypes.ExtensionFileOrCode"
              }
            },
            "allFrames": {
              "type": "boolean",
              "optional": true,
              "description": "If allFrames is <code>true</code>, implies that the JavaScript or CSS should be injected into all frames of current page. By default, it's <code>false</code> and is only injected into the top frame."
            },
            "matchAboutBlank": {
              "type": "boolean",
              "optional": true,
              "description": "If matchAboutBlank is true, then the code is also injected in about:blank and about:srcdoc frames if your extension has access to its parent document. Code cannot be inserted in top-level about:-frames. By default it is <code>false</code>."
            },
            "runAt": {
              "$ref": "extensionTypes.RunAt",
              "optional": true,
              "description": "The soonest that the JavaScript or CSS will be injected into the tab. Defaults to \"document_idle\"."
            }
          }
        },
        {
          "id": "RegisteredContentScript",
          "type": "object",
          "description": "An object that represents a content script registered programmatically",
          "functions": [
            {
              "name": "unregister",
              "type": "function",
              "description": "Unregister a content script registered programmatically",
              "async": true,
              "parameters": []
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "register",
          "type": "function",
          "description": "Register a content script programmatically",
          "async": true,
          "parameters": [
            {
              "name": "contentScriptOptions",
              "$ref": "RegisteredContentScriptOptions"
            }
          ]
        }
      ]
    }
  ],
  "experiments.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "Permission",
          "choices": [
            {
              "type": "string",
              "pattern": "^experiments(\\.\\w+)+$"
            }
          ]
        },
        {
          "$extend": "WebExtensionManifest",
          "properties": {
            "experiment_apis": {
              "type": "object",
              "additionalProperties": {
                "$ref": "experiments.ExperimentAPI"
              },
              "optional": true
            }
          }
        }
      ]
    },
    {
      "namespace": "experiments",
      "types": [
        {
          "id": "ExperimentAPI",
          "type": "object",
          "properties": {
            "schema": {
              "$ref": "ExperimentURL"
            },
            "parent": {
              "type": "object",
              "properties": {
                "events": {
                  "$ref": "APIEvents",
                  "optional": true,
                  "default": []
                },
                "paths": {
                  "$ref": "APIPaths",
                  "optional": true,
                  "default": []
                },
                "script": {
                  "$ref": "ExperimentURL"
                },
                "scopes": {
                  "type": "array",
                  "items": {
                    "$ref": "APIParentScope",
                    "onError": "warn"
                  },
                  "optional": true,
                  "default": []
                }
              },
              "optional": true
            },
            "child": {
              "type": "object",
              "properties": {
                "paths": {
                  "$ref": "APIPaths"
                },
                "script": {
                  "$ref": "ExperimentURL"
                },
                "scopes": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "$ref": "APIChildScope",
                    "onError": "warn"
                  }
                }
              },
              "optional": true
            }
          }
        },
        {
          "id": "ExperimentURL",
          "type": "string",
          "format": "unresolvedRelativeUrl"
        },
        {
          "id": "APIPaths",
          "type": "array",
          "items": {
            "$ref": "APIPath"
          },
          "minItems": 1
        },
        {
          "id": "APIPath",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        {
          "id": "APIEvents",
          "type": "array",
          "items": {
            "$ref": "APIEvent",
            "onError": "warn"
          }
        },
        {
          "id": "APIEvent",
          "type": "string",
          "enum": [
            "startup"
          ]
        },
        {
          "id": "APIParentScope",
          "type": "string",
          "enum": [
            "addon_parent",
            "content_parent",
            "devtools_parent"
          ]
        },
        {
          "id": "APIChildScope",
          "type": "string",
          "enum": [
            "addon_child",
            "content_child",
            "devtools_child"
          ]
        }
      ]
    }
  ],
  "extension.json": [
    {
      "namespace": "extension",
      "allowedContexts": [
        "content",
        "devtools"
      ],
      "description": "The <code>browser.extension</code> API has utilities that can be used by any extension page. It includes support for exchanging messages between an extension and its content scripts or between extensions, as described in detail in $(topic:messaging)[Message Passing].",
      "properties": {
        "lastError": {
          "type": "object",
          "optional": true,
          "max_manifest_version": 2,
          "deprecated": "Please use $(ref:runtime.lastError).",
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "Set for the lifetime of a callback if an ansychronous extension api has resulted in an error. If no error has occured lastError will be <var>undefined</var>.",
          "properties": {
            "message": {
              "type": "string",
              "description": "Description of the error that has taken place."
            }
          },
          "additionalProperties": {
            "type": "any"
          }
        },
        "inIncognitoContext": {
          "type": "boolean",
          "optional": true,
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "True for content scripts running inside incognito tabs, and for extension pages running inside an incognito process. The latter only applies to extensions with 'split' incognito_behavior."
        }
      },
      "types": [
        {
          "id": "ViewType",
          "type": "string",
          "enum": [
            "tab",
            "popup",
            "sidebar"
          ],
          "description": "The type of extension view."
        }
      ],
      "functions": [
        {
          "name": "getURL",
          "type": "function",
          "deprecated": "Please use $(ref:runtime.getURL).",
          "max_manifest_version": 2,
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "Converts a relative path within an extension install directory to a fully-qualified URL.",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "description": "A path to a resource within an extension expressed relative to its install directory."
            }
          ],
          "returns": {
            "type": "string",
            "description": "The fully-qualified URL to the resource."
          }
        },
        {
          "name": "getViews",
          "type": "function",
          "description": "Returns an array of the JavaScript 'window' objects for each of the pages running inside the current extension.",
          "parameters": [
            {
              "type": "object",
              "name": "fetchProperties",
              "optional": true,
              "properties": {
                "type": {
                  "$ref": "ViewType",
                  "optional": true,
                  "description": "The type of view to get. If omitted, returns all views (including background pages and tabs). Valid values: 'tab', 'popup', 'sidebar'."
                },
                "windowId": {
                  "type": "integer",
                  "optional": true,
                  "description": "The window to restrict the search to. If omitted, returns all views."
                },
                "tabId": {
                  "type": "integer",
                  "optional": true,
                  "description": "Find a view according to a tab id. If this field is omitted, returns all views."
                }
              }
            }
          ],
          "returns": {
            "type": "array",
            "description": "Array of global objects",
            "items": {
              "type": "object",
              "isInstanceOf": "Window",
              "additionalProperties": {
                "type": "any"
              }
            }
          }
        },
        {
          "name": "getBackgroundPage",
          "type": "function",
          "max_manifest_version": 2,
          "description": "Returns the JavaScript 'window' object for the background page running inside the current extension. Returns null if the extension has no background page.",
          "parameters": [],
          "returns": {
            "type": "object",
            "optional": true,
            "isInstanceOf": "Window",
            "additionalProperties": {
              "type": "any"
            }
          }
        },
        {
          "name": "isAllowedIncognitoAccess",
          "type": "function",
          "description": "Retrieves the state of the extension's access to Incognito-mode (as determined by the user-controlled 'Allowed in Incognito' checkbox.",
          "async": "callback",
          "parameters": [
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "isAllowedAccess",
                  "type": "boolean",
                  "description": "True if the extension has access to Incognito mode, false otherwise."
                }
              ]
            }
          ]
        },
        {
          "name": "isAllowedFileSchemeAccess",
          "type": "function",
          "description": "Retrieves the state of the extension's access to the 'file://' scheme (as determined by the user-controlled 'Allow access to File URLs' checkbox.",
          "async": "callback",
          "parameters": [
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "isAllowedAccess",
                  "type": "boolean",
                  "description": "True if the extension can access the 'file://' scheme, false otherwise."
                }
              ]
            }
          ]
        },
        {
          "name": "setUpdateUrlData",
          "unsupported": true,
          "type": "function",
          "description": "Sets the value of the ap CGI parameter used in the extension's update URL.  This value is ignored for extensions that are hosted in the browser vendor's store.",
          "parameters": [
            {
              "type": "string",
              "name": "data",
              "maxLength": 1024
            }
          ]
        }
      ],
      "events": [
        {
          "name": "onRequest",
          "unsupported": true,
          "deprecated": "Please use $(ref:runtime.onMessage).",
          "type": "function",
          "description": "Fired when a request is sent from either an extension process or a content script.",
          "parameters": [
            {
              "name": "request",
              "type": "any",
              "optional": true,
              "description": "The request sent by the calling script."
            },
            {
              "name": "sender",
              "$ref": "runtime.MessageSender"
            },
            {
              "name": "sendResponse",
              "type": "function",
              "description": "Function to call (at most once) when you have a response. The argument should be any JSON-ifiable object, or undefined if there is no response. If you have more than one <code>onRequest</code> listener in the same document, then only one may send a response."
            }
          ]
        },
        {
          "name": "onRequestExternal",
          "unsupported": true,
          "deprecated": "Please use $(ref:runtime.onMessageExternal).",
          "type": "function",
          "description": "Fired when a request is sent from another extension.",
          "parameters": [
            {
              "name": "request",
              "type": "any",
              "optional": true,
              "description": "The request sent by the calling script."
            },
            {
              "name": "sender",
              "$ref": "runtime.MessageSender"
            },
            {
              "name": "sendResponse",
              "type": "function",
              "description": "Function to call when you have a response. The argument should be any JSON-ifiable object, or undefined if there is no response."
            }
          ]
        }
      ]
    }
  ],
  "i18n.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "WebExtensionManifest",
          "properties": {
            "default_locale": {
              "type": "string",
              "optional": "true"
            },
            "l10n_resources": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "optional": true
            }
          }
        }
      ]
    },
    {
      "namespace": "i18n",
      "allowedContexts": [
        "content",
        "devtools"
      ],
      "defaultContexts": [
        "content",
        "devtools"
      ],
      "description": "Use the <code>browser.i18n</code> infrastructure to implement internationalization across your whole app or extension.",
      "types": [
        {
          "id": "LanguageCode",
          "type": "string",
          "description": "An ISO language code such as <code>en</code> or <code>fr</code>. For a complete list of languages supported by this method, see <a href='http://src.chromium.org/viewvc/chrome/trunk/src/third_party/cld/languages/internal/languages.cc'>kLanguageInfoTable</a>. For an unknown language, <code>und</code> will be returned, which means that [percentage] of the text is unknown to CLD"
        }
      ],
      "functions": [
        {
          "name": "getAcceptLanguages",
          "type": "function",
          "description": "Gets the accept-languages of the browser. This is different from the locale used by the browser; to get the locale, use $(ref:i18n.getUILanguage).",
          "async": "callback",
          "parameters": [
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "languages",
                  "type": "array",
                  "items": {
                    "$ref": "LanguageCode"
                  },
                  "description": "Array of LanguageCode"
                }
              ]
            }
          ]
        },
        {
          "name": "getMessage",
          "type": "function",
          "description": "Gets the localized string for the specified message. If the message is missing, this method returns an empty string (''). If the format of the <code>getMessage()</code> call is wrong &mdash; for example, <em>messageName</em> is not a string or the <em>substitutions</em> array has more than 9 elements &mdash; this method returns <code>undefined</code>.",
          "parameters": [
            {
              "type": "string",
              "name": "messageName",
              "description": "The name of the message, as specified in the <code>$(topic:i18n-messages)[messages.json]</code> file."
            },
            {
              "type": "any",
              "name": "substitutions",
              "optional": true,
              "description": "Substitution strings, if the message requires any."
            }
          ],
          "returns": {
            "type": "string",
            "description": "Message localized for current locale."
          }
        },
        {
          "name": "getUILanguage",
          "type": "function",
          "description": "Gets the browser UI language of the browser. This is different from $(ref:i18n.getAcceptLanguages) which returns the preferred user languages.",
          "parameters": [],
          "returns": {
            "type": "string",
            "description": "The browser UI language code such as en-US or fr-FR."
          }
        },
        {
          "name": "detectLanguage",
          "type": "function",
          "description": "Detects the language of the provided text using CLD.",
          "async": "callback",
          "parameters": [
            {
              "type": "string",
              "name": "text",
              "description": "User input string to be translated."
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "type": "object",
                  "name": "result",
                  "description": "LanguageDetectionResult object that holds detected langugae reliability and array of DetectedLanguage",
                  "properties": {
                    "isReliable": {
                      "type": "boolean",
                      "description": "CLD detected language reliability"
                    },
                    "languages": {
                      "type": "array",
                      "description": "array of detectedLanguage",
                      "items": {
                        "type": "object",
                        "description": "DetectedLanguage object that holds detected ISO language code and its percentage in the input string",
                        "properties": {
                          "language": {
                            "$ref": "LanguageCode"
                          },
                          "percentage": {
                            "type": "integer",
                            "description": "The percentage of the detected language"
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      ],
      "events": []
    }
  ],
  "management.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "OptionalPermission",
          "choices": [
            {
              "type": "string",
              "enum": [
                "management"
              ]
            }
          ]
        }
      ]
    },
    {
      "namespace": "management",
      "description": "The <code>browser.management</code> API provides ways to manage the list of extensions that are installed and running.",
      "types": [
        {
          "id": "IconInfo",
          "description": "Information about an icon belonging to an extension.",
          "type": "object",
          "properties": {
            "size": {
              "type": "integer",
              "description": "A number representing the width and height of the icon. Likely values include (but are not limited to) 128, 48, 24, and 16."
            },
            "url": {
              "type": "string",
              "description": "The URL for this icon image. To display a grayscale version of the icon (to indicate that an extension is disabled, for example), append <code>?grayscale=true</code> to the URL."
            }
          }
        },
        {
          "id": "ExtensionDisabledReason",
          "description": "A reason the item is disabled.",
          "type": "string",
          "enum": [
            "unknown",
            "permissions_increase"
          ]
        },
        {
          "id": "ExtensionType",
          "description": "The type of this extension, 'extension' or 'theme'.",
          "type": "string",
          "enum": [
            "extension",
            "theme"
          ]
        },
        {
          "id": "ExtensionInstallType",
          "description": "How the extension was installed. One of<br><var>development</var>: The extension was loaded unpacked in developer mode,<br><var>normal</var>: The extension was installed normally via an .xpi file,<br><var>sideload</var>: The extension was installed by other software on the machine,<br><var>other</var>: The extension was installed by other means.",
          "type": "string",
          "enum": [
            "development",
            "normal",
            "sideload",
            "other"
          ]
        },
        {
          "id": "ExtensionInfo",
          "description": "Information about an installed extension.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The extension's unique identifier.",
              "type": "string"
            },
            "name": {
              "description": "The name of this extension.",
              "type": "string"
            },
            "shortName": {
              "description": "A short version of the name of this extension.",
              "type": "string",
              "optional": true
            },
            "description": {
              "description": "The description of this extension.",
              "type": "string"
            },
            "version": {
              "description": "The <a href='manifest/version'>version</a> of this extension.",
              "type": "string"
            },
            "versionName": {
              "description": "The <a href='manifest/version#version_name'>version name</a> of this extension if the manifest specified one.",
              "type": "string",
              "optional": true
            },
            "mayDisable": {
              "description": "Whether this extension can be disabled or uninstalled by the user.",
              "type": "boolean"
            },
            "enabled": {
              "description": "Whether it is currently enabled or disabled.",
              "type": "boolean"
            },
            "disabledReason": {
              "description": "A reason the item is disabled.",
              "$ref": "ExtensionDisabledReason",
              "optional": true
            },
            "type": {
              "description": "The type of this extension, 'extension' or 'theme'.",
              "$ref": "ExtensionType"
            },
            "homepageUrl": {
              "description": "The URL of the homepage of this extension.",
              "type": "string",
              "optional": true
            },
            "updateUrl": {
              "description": "The update URL of this extension.",
              "type": "string",
              "optional": true
            },
            "optionsUrl": {
              "description": "The url for the item's options page, if it has one.",
              "type": "string"
            },
            "icons": {
              "description": "A list of icon information. Note that this just reflects what was declared in the manifest, and the actual image at that url may be larger or smaller than what was declared, so you might consider using explicit width and height attributes on img tags referencing these images. See the <a href='manifest/icons'>manifest documentation on icons</a> for more details.",
              "type": "array",
              "optional": true,
              "items": {
                "$ref": "IconInfo"
              }
            },
            "permissions": {
              "description": "Returns a list of API based permissions.",
              "type": "array",
              "optional": true,
              "items": {
                "type": "string"
              }
            },
            "hostPermissions": {
              "description": "Returns a list of host based permissions.",
              "type": "array",
              "optional": true,
              "items": {
                "type": "string"
              }
            },
            "installType": {
              "description": "How the extension was installed.",
              "$ref": "ExtensionInstallType"
            }
          }
        }
      ],
      "functions": [
        {
          "name": "getAll",
          "type": "function",
          "permissions": [
            "management"
          ],
          "description": "Returns a list of information about installed extensions.",
          "async": "callback",
          "parameters": [
            {
              "name": "callback",
              "type": "function",
              "optional": true,
              "parameters": [
                {
                  "type": "array",
                  "name": "result",
                  "items": {
                    "$ref": "ExtensionInfo"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "permissions": [
            "management"
          ],
          "description": "Returns information about the installed extension that has the given ID.",
          "async": "callback",
          "parameters": [
            {
              "name": "id",
              "$ref": "manifest.ExtensionID",
              "description": "The ID from an item of $(ref:management.ExtensionInfo)."
            },
            {
              "name": "callback",
              "type": "function",
              "optional": true,
              "parameters": [
                {
                  "name": "result",
                  "$ref": "ExtensionInfo"
                }
              ]
            }
          ]
        },
        {
          "name": "install",
          "type": "function",
          "requireUserInput": true,
          "permissions": [
            "management"
          ],
          "description": "Installs and enables a theme extension from the given url.",
          "async": "callback",
          "parameters": [
            {
              "name": "options",
              "type": "object",
              "properties": {
                "url": {
                  "$ref": "manifest.HttpURL",
                  "description": "URL pointing to the XPI file on addons.mozilla.org or similar."
                },
                "hash": {
                  "type": "string",
                  "optional": true,
                  "pattern": "^(sha256|sha512):[0-9a-fA-F]{64,128}$",
                  "description": "A hash of the XPI file, using sha256 or stronger."
                }
              }
            },
            {
              "name": "callback",
              "type": "function",
              "optional": true,
              "parameters": [
                {
                  "name": "result",
                  "type": "object",
                  "properties": {
                    "id": {
                      "$ref": "manifest.ExtensionID"
                    }
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "getSelf",
          "type": "function",
          "description": "Returns information about the calling extension. Note: This function can be used without requesting the 'management' permission in the manifest.",
          "async": "callback",
          "parameters": [
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "name": "result",
                  "$ref": "ExtensionInfo"
                }
              ]
            }
          ]
        },
        {
          "name": "uninstallSelf",
          "type": "function",
          "description": "Uninstalls the calling extension. Note: This function can be used without requesting the 'management' permission in the manifest.",
          "async": "callback",
          "parameters": [
            {
              "type": "object",
              "name": "options",
              "optional": true,
              "properties": {
                "showConfirmDialog": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether or not a confirm-uninstall dialog should prompt the user. Defaults to false."
                },
                "dialogMessage": {
                  "type": "string",
                  "optional": true,
                  "description": "The message to display to a user when being asked to confirm removal of the extension."
                }
              }
            },
            {
              "name": "callback",
              "type": "function",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "setEnabled",
          "type": "function",
          "permissions": [
            "management"
          ],
          "description": "Enables or disables the given add-on.",
          "async": "callback",
          "parameters": [
            {
              "name": "id",
              "type": "string",
              "description": "ID of the add-on to enable/disable."
            },
            {
              "name": "enabled",
              "type": "boolean",
              "description": "Whether to enable or disable the add-on."
            },
            {
              "name": "callback",
              "type": "function",
              "optional": true,
              "parameters": []
            }
          ]
        }
      ],
      "events": [
        {
          "name": "onDisabled",
          "type": "function",
          "permissions": [
            "management"
          ],
          "description": "Fired when an addon has been disabled.",
          "parameters": [
            {
              "name": "info",
              "$ref": "ExtensionInfo"
            }
          ]
        },
        {
          "name": "onEnabled",
          "type": "function",
          "permissions": [
            "management"
          ],
          "description": "Fired when an addon has been enabled.",
          "parameters": [
            {
              "name": "info",
              "$ref": "ExtensionInfo"
            }
          ]
        },
        {
          "name": "onInstalled",
          "type": "function",
          "permissions": [
            "management"
          ],
          "description": "Fired when an addon has been installed.",
          "parameters": [
            {
              "name": "info",
              "$ref": "ExtensionInfo"
            }
          ]
        },
        {
          "name": "onUninstalled",
          "type": "function",
          "permissions": [
            "management"
          ],
          "description": "Fired when an addon has been uninstalled.",
          "parameters": [
            {
              "name": "info",
              "$ref": "ExtensionInfo"
            }
          ]
        }
      ]
    }
  ],
  "permissions.json": [
    {
      "namespace": "permissions",
      "permissions": [
        "manifest:optional_permissions"
      ],
      "types": [
        {
          "id": "Permissions",
          "type": "object",
          "properties": {
            "permissions": {
              "type": "array",
              "items": {
                "$ref": "manifest.OptionalPermission"
              },
              "optional": true,
              "default": []
            },
            "origins": {
              "type": "array",
              "items": {
                "$ref": "manifest.MatchPattern"
              },
              "optional": true,
              "default": []
            }
          }
        },
        {
          "id": "AnyPermissions",
          "type": "object",
          "properties": {
            "permissions": {
              "type": "array",
              "items": {
                "$ref": "manifest.Permission"
              },
              "optional": true,
              "default": []
            },
            "origins": {
              "type": "array",
              "items": {
                "$ref": "manifest.MatchPattern"
              },
              "optional": true,
              "default": []
            }
          }
        }
      ],
      "functions": [
        {
          "name": "getAll",
          "type": "function",
          "async": "callback",
          "description": "Get a list of all the extension's permissions.",
          "parameters": [
            {
              "name": "callback",
              "type": "function",
              "parameters": [
                {
                  "name": "permissions",
                  "$ref": "AnyPermissions"
                }
              ]
            }
          ]
        },
        {
          "name": "contains",
          "type": "function",
          "async": "callback",
          "description": "Check if the extension has the given permissions.",
          "parameters": [
            {
              "name": "permissions",
              "$ref": "AnyPermissions"
            },
            {
              "name": "callback",
              "type": "function",
              "parameters": [
                {
                  "name": "result",
                  "type": "boolean"
                }
              ]
            }
          ]
        },
        {
          "name": "request",
          "type": "function",
          "allowedContexts": [
            "content"
          ],
          "async": "callback",
          "requireUserInput": true,
          "description": "Request the given permissions.",
          "parameters": [
            {
              "name": "permissions",
              "$ref": "Permissions"
            },
            {
              "name": "callback",
              "type": "function",
              "parameters": [
                {
                  "name": "granted",
                  "type": "boolean"
                }
              ]
            }
          ]
        },
        {
          "name": "remove",
          "type": "function",
          "async": "callback",
          "description": "Relinquish the given permissions.",
          "parameters": [
            {
              "name": "permissions",
              "$ref": "Permissions"
            },
            {
              "name": "callback",
              "type": "function",
              "parameters": []
            }
          ]
        }
      ],
      "events": [
        {
          "name": "onAdded",
          "type": "function",
          "description": "Fired when the extension acquires new permissions.",
          "parameters": [
            {
              "name": "permissions",
              "$ref": "Permissions"
            }
          ]
        },
        {
          "name": "onRemoved",
          "type": "function",
          "description": "Fired when permissions are removed from the extension.",
          "parameters": [
            {
              "name": "permissions",
              "$ref": "Permissions"
            }
          ]
        }
      ]
    }
  ],
  "runtime.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "OptionalPermission",
          "choices": [
            {
              "type": "string",
              "enum": [
                "nativeMessaging"
              ]
            }
          ]
        }
      ]
    },
    {
      "namespace": "runtime",
      "allowedContexts": [
        "content",
        "devtools"
      ],
      "description": "Use the <code>browser.runtime</code> API to retrieve the background page, return details about the manifest, and listen for and respond to events in the app or extension lifecycle. You can also use this API to convert the relative path of URLs to fully-qualified URLs.",
      "types": [
        {
          "id": "Port",
          "type": "object",
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "An object which allows two way communication with other pages.",
          "properties": {
            "name": {
              "type": "string"
            },
            "disconnect": {
              "type": "function"
            },
            "onDisconnect": {
              "$ref": "events.Event"
            },
            "onMessage": {
              "$ref": "events.Event"
            },
            "postMessage": {
              "type": "function"
            },
            "sender": {
              "$ref": "MessageSender",
              "optional": true,
              "description": "This property will <b>only</b> be present on ports passed to onConnect/onConnectExternal listeners."
            }
          },
          "additionalProperties": {
            "type": "any"
          }
        },
        {
          "id": "MessageSender",
          "type": "object",
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "An object containing information about the script context that sent a message or request.",
          "properties": {
            "tab": {
              "$ref": "tabs.Tab",
              "optional": true,
              "description": "The $(ref:tabs.Tab) which opened the connection, if any. This property will <strong>only</strong> be present when the connection was opened from a tab (including content scripts), and <strong>only</strong> if the receiver is an extension, not an app."
            },
            "frameId": {
              "type": "integer",
              "optional": true,
              "description": "The $(topic:frame_ids)[frame] that opened the connection. 0 for top-level frames, positive for child frames. This will only be set when <code>tab</code> is set."
            },
            "id": {
              "type": "string",
              "optional": true,
              "description": "The ID of the extension or app that opened the connection, if any."
            },
            "url": {
              "type": "string",
              "optional": true,
              "description": "The URL of the page or frame that opened the connection. If the sender is in an iframe, it will be iframe's URL not the URL of the page which hosts it."
            },
            "tlsChannelId": {
              "unsupported": true,
              "type": "string",
              "optional": true,
              "description": "The TLS channel ID of the page or frame that opened the connection, if requested by the extension or app, and if available."
            }
          }
        },
        {
          "id": "PlatformOs",
          "type": "string",
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "The operating system the browser is running on.",
          "enum": [
            "mac",
            "win",
            "android",
            "cros",
            "linux",
            "openbsd"
          ]
        },
        {
          "id": "PlatformArch",
          "type": "string",
          "enum": [
            "aarch64",
            "arm",
            "ppc64",
            "s390x",
            "sparc64",
            "x86-32",
            "x86-64"
          ],
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "The machine's processor architecture."
        },
        {
          "id": "PlatformInfo",
          "type": "object",
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "An object containing information about the current platform.",
          "properties": {
            "os": {
              "$ref": "PlatformOs",
              "description": "The operating system the browser is running on."
            },
            "arch": {
              "$ref": "PlatformArch",
              "description": "The machine's processor architecture."
            },
            "nacl_arch": {
              "unsupported": true,
              "description": "The native client architecture. This may be different from arch on some platforms.",
              "$ref": "PlatformNaclArch"
            }
          }
        },
        {
          "id": "BrowserInfo",
          "type": "object",
          "description": "An object containing information about the current browser.",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the browser, for example 'Firefox'."
            },
            "vendor": {
              "type": "string",
              "description": "The name of the browser vendor, for example 'Mozilla'."
            },
            "version": {
              "type": "string",
              "description": "The browser's version, for example '42.0.0' or '0.8.1pre'."
            },
            "buildID": {
              "type": "string",
              "description": "The browser's build ID/date, for example '20160101'."
            }
          }
        },
        {
          "id": "RequestUpdateCheckStatus",
          "type": "string",
          "enum": [
            "throttled",
            "no_update",
            "update_available"
          ],
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "Result of the update check."
        },
        {
          "id": "OnInstalledReason",
          "type": "string",
          "enum": [
            "install",
            "update",
            "browser_update"
          ],
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "The reason that this event is being dispatched."
        },
        {
          "id": "OnRestartRequiredReason",
          "type": "string",
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "The reason that the event is being dispatched. 'app_update' is used when the restart is needed because the application is updated to a newer version. 'os_update' is used when the restart is needed because the browser/OS is updated to a newer version. 'periodic' is used when the system runs for more than the permitted uptime set in the enterprise policy.",
          "enum": [
            "app_update",
            "os_update",
            "periodic"
          ]
        }
      ],
      "properties": {
        "lastError": {
          "type": "object",
          "optional": true,
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "This will be defined during an API method callback if there was an error",
          "properties": {
            "message": {
              "optional": true,
              "type": "string",
              "description": "Details about the error which occurred."
            }
          },
          "additionalProperties": {
            "type": "any"
          }
        },
        "id": {
          "type": "string",
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "The ID of the extension/app."
        }
      },
      "functions": [
        {
          "name": "getBackgroundPage",
          "max_manifest_version": 2,
          "type": "function",
          "description": "Retrieves the JavaScript 'window' object for the background page running inside the current extension/app. If the background page is an event page, the system will ensure it is loaded before calling the callback. If there is no background page, an error is set.",
          "async": "callback",
          "parameters": [
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "backgroundPage",
                  "optional": true,
                  "type": "object",
                  "isInstanceOf": "Window",
                  "additionalProperties": {
                    "type": "any"
                  },
                  "description": "The JavaScript 'window' object for the background page."
                }
              ]
            }
          ]
        },
        {
          "name": "openOptionsPage",
          "type": "function",
          "description": "<p>Open your Extension's options page, if possible.</p><p>The precise behavior may depend on your manifest's <code>$(topic:optionsV2)[options_ui]</code> or <code>$(topic:options)[options_page]</code> key, or what the browser happens to support at the time.</p><p>If your Extension does not declare an options page, or the browser failed to create one for some other reason, the callback will set $(ref:lastError).</p>",
          "async": "callback",
          "parameters": [
            {
              "type": "function",
              "name": "callback",
              "parameters": [],
              "optional": true
            }
          ]
        },
        {
          "name": "getManifest",
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "Returns details about the app or extension from the manifest. The object returned is a serialization of the full $(topic:manifest)[manifest file].",
          "type": "function",
          "parameters": [],
          "returns": {
            "type": "object",
            "properties": {},
            "additionalProperties": {
              "type": "any"
            },
            "description": "The manifest details."
          }
        },
        {
          "name": "getURL",
          "type": "function",
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "Converts a relative path within an app/extension install directory to a fully-qualified URL.",
          "parameters": [
            {
              "type": "string",
              "name": "path",
              "description": "A path to a resource within an app/extension expressed relative to its install directory."
            }
          ],
          "returns": {
            "type": "string",
            "description": "The fully-qualified URL to the resource."
          }
        },
        {
          "name": "setUninstallURL",
          "type": "function",
          "description": "Sets the URL to be visited upon uninstallation. This may be used to clean up server-side data, do analytics, and implement surveys. Maximum 255 characters.",
          "async": "callback",
          "parameters": [
            {
              "type": "string",
              "name": "url",
              "optional": true,
              "maxLength": 255,
              "description": "URL to be opened after the extension is uninstalled. This URL must have an http: or https: scheme. Set an empty string to not open a new tab upon uninstallation."
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "description": "Called when the uninstall URL is set. If the given URL is invalid, $(ref:runtime.lastError) will be set.",
              "parameters": []
            }
          ]
        },
        {
          "name": "reload",
          "description": "Reloads the app or extension.",
          "type": "function",
          "parameters": []
        },
        {
          "name": "requestUpdateCheck",
          "unsupported": true,
          "type": "function",
          "description": "Requests an update check for this app/extension.",
          "async": "callback",
          "parameters": [
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "status",
                  "$ref": "RequestUpdateCheckStatus",
                  "description": "Result of the update check."
                },
                {
                  "name": "details",
                  "type": "object",
                  "optional": true,
                  "properties": {
                    "version": {
                      "type": "string",
                      "description": "The version of the available update."
                    }
                  },
                  "description": "If an update is available, this contains more information about the available update."
                }
              ]
            }
          ]
        },
        {
          "name": "restart",
          "unsupported": true,
          "description": "Restart the device when the app runs in kiosk mode. Otherwise, it's no-op.",
          "type": "function",
          "parameters": []
        },
        {
          "name": "connect",
          "type": "function",
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "Attempts to connect to connect listeners within an extension/app (such as the background page), or other extensions/apps. This is useful for content scripts connecting to their extension processes, inter-app/extension communication, and $(topic:manifest/externally_connectable)[web messaging]. Note that this does not connect to any listeners in a content script. Extensions may connect to content scripts embedded in tabs via $(ref:tabs.connect).",
          "parameters": [
            {
              "type": "string",
              "name": "extensionId",
              "optional": true,
              "description": "The ID of the extension or app to connect to. If omitted, a connection will be attempted with your own extension. Required if sending messages from a web page for $(topic:manifest/externally_connectable)[web messaging]."
            },
            {
              "type": "object",
              "name": "connectInfo",
              "properties": {
                "name": {
                  "type": "string",
                  "optional": true,
                  "description": "Will be passed into onConnect for processes that are listening for the connection event."
                },
                "includeTlsChannelId": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether the TLS channel ID will be passed into onConnectExternal for processes that are listening for the connection event."
                }
              },
              "optional": true
            }
          ],
          "returns": {
            "$ref": "Port",
            "description": "Port through which messages can be sent and received. The port's $(ref:runtime.Port onDisconnect) event is fired if the extension/app does not exist. "
          }
        },
        {
          "name": "connectNative",
          "type": "function",
          "description": "Connects to a native application in the host machine.",
          "allowedContexts": [
            "content"
          ],
          "permissions": [
            "nativeMessaging"
          ],
          "parameters": [
            {
              "type": "string",
              "pattern": "^\\w+(\\.\\w+)*$",
              "name": "application",
              "description": "The name of the registered application to connect to."
            }
          ],
          "returns": {
            "$ref": "Port",
            "description": "Port through which messages can be sent and received with the application"
          }
        },
        {
          "name": "sendMessage",
          "type": "function",
          "allowAmbiguousOptionalArguments": true,
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "Sends a single message to event listeners within your extension/app or a different extension/app. Similar to $(ref:runtime.connect) but only sends a single message, with an optional response. If sending to your extension, the $(ref:runtime.onMessage) event will be fired in each page, or $(ref:runtime.onMessageExternal), if a different extension. Note that extensions cannot send messages to content scripts using this method. To send messages to content scripts, use $(ref:tabs.sendMessage).",
          "async": "responseCallback",
          "parameters": [
            {
              "type": "string",
              "name": "extensionId",
              "optional": true,
              "description": "The ID of the extension/app to send the message to. If omitted, the message will be sent to your own extension/app. Required if sending messages from a web page for $(topic:manifest/externally_connectable)[web messaging]."
            },
            {
              "type": "any",
              "name": "message"
            },
            {
              "type": "object",
              "name": "options",
              "properties": {
                "includeTlsChannelId": {
                  "type": "boolean",
                  "optional": true,
                  "unsupported": true,
                  "description": "Whether the TLS channel ID will be passed into onMessageExternal for processes that are listening for the connection event."
                }
              },
              "optional": true
            },
            {
              "type": "function",
              "name": "responseCallback",
              "optional": true,
              "parameters": [
                {
                  "name": "response",
                  "type": "any",
                  "description": "The JSON response object sent by the handler of the message. If an error occurs while connecting to the extension, the callback will be called with no arguments and $(ref:runtime.lastError) will be set to the error message."
                }
              ]
            }
          ]
        },
        {
          "name": "sendNativeMessage",
          "type": "function",
          "description": "Send a single message to a native application.",
          "allowedContexts": [
            "content"
          ],
          "permissions": [
            "nativeMessaging"
          ],
          "async": "responseCallback",
          "parameters": [
            {
              "name": "application",
              "description": "The name of the native messaging host.",
              "type": "string",
              "pattern": "^\\w+(\\.\\w+)*$"
            },
            {
              "name": "message",
              "description": "The message that will be passed to the native messaging host.",
              "type": "any"
            },
            {
              "type": "function",
              "name": "responseCallback",
              "optional": true,
              "parameters": [
                {
                  "name": "response",
                  "type": "any",
                  "description": "The response message sent by the native messaging host. If an error occurs while connecting to the native messaging host, the callback will be called with no arguments and $(ref:runtime.lastError) will be set to the error message."
                }
              ]
            }
          ]
        },
        {
          "name": "getBrowserInfo",
          "type": "function",
          "description": "Returns information about the current browser.",
          "async": "callback",
          "parameters": [
            {
              "type": "function",
              "name": "callback",
              "description": "Called with results",
              "parameters": [
                {
                  "name": "browserInfo",
                  "$ref": "BrowserInfo"
                }
              ]
            }
          ]
        },
        {
          "name": "getPlatformInfo",
          "type": "function",
          "description": "Returns information about the current platform.",
          "async": "callback",
          "parameters": [
            {
              "type": "function",
              "name": "callback",
              "description": "Called with results",
              "parameters": [
                {
                  "name": "platformInfo",
                  "$ref": "PlatformInfo"
                }
              ]
            }
          ]
        },
        {
          "name": "getPackageDirectoryEntry",
          "unsupported": true,
          "type": "function",
          "description": "Returns a DirectoryEntry for the package directory.",
          "async": "callback",
          "parameters": [
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "directoryEntry",
                  "type": "object",
                  "additionalProperties": {
                    "type": "any"
                  },
                  "isInstanceOf": "DirectoryEntry"
                }
              ]
            }
          ]
        }
      ],
      "events": [
        {
          "name": "onStartup",
          "type": "function",
          "description": "Fired when a profile that has this extension installed first starts up. This event is not fired for incognito profiles."
        },
        {
          "name": "onInstalled",
          "type": "function",
          "description": "Fired when the extension is first installed, when the extension is updated to a new version, and when the browser is updated to a new version.",
          "parameters": [
            {
              "type": "object",
              "name": "details",
              "properties": {
                "reason": {
                  "$ref": "OnInstalledReason",
                  "description": "The reason that this event is being dispatched."
                },
                "previousVersion": {
                  "type": "string",
                  "optional": true,
                  "description": "Indicates the previous version of the extension, which has just been updated. This is present only if 'reason' is 'update'."
                },
                "temporary": {
                  "type": "boolean",
                  "description": "Indicates whether the addon is installed as a temporary extension."
                },
                "id": {
                  "type": "string",
                  "optional": true,
                  "unsupported": true,
                  "description": "Indicates the ID of the imported shared module extension which updated. This is present only if 'reason' is 'shared_module_update'."
                }
              }
            }
          ]
        },
        {
          "name": "onSuspend",
          "unsupported": true,
          "type": "function",
          "description": "Sent to the event page just before it is unloaded. This gives the extension opportunity to do some clean up. Note that since the page is unloading, any asynchronous operations started while handling this event are not guaranteed to complete. If more activity for the event page occurs before it gets unloaded the onSuspendCanceled event will be sent and the page won't be unloaded. "
        },
        {
          "name": "onSuspendCanceled",
          "unsupported": true,
          "type": "function",
          "description": "Sent after onSuspend to indicate that the app won't be unloaded after all."
        },
        {
          "name": "onUpdateAvailable",
          "type": "function",
          "description": "Fired when an update is available, but isn't installed immediately because the app is currently running. If you do nothing, the update will be installed the next time the background page gets unloaded, if you want it to be installed sooner you can explicitly call $(ref:runtime.reload). If your extension is using a persistent background page, the background page of course never gets unloaded, so unless you call $(ref:runtime.reload) manually in response to this event the update will not get installed until the next time the browser itself restarts. If no handlers are listening for this event, and your extension has a persistent background page, it behaves as if $(ref:runtime.reload) is called in response to this event.",
          "parameters": [
            {
              "type": "object",
              "name": "details",
              "properties": {
                "version": {
                  "type": "string",
                  "description": "The version number of the available update."
                }
              },
              "additionalProperties": {
                "type": "any"
              },
              "description": "The manifest details of the available update."
            }
          ]
        },
        {
          "name": "onBrowserUpdateAvailable",
          "unsupported": true,
          "type": "function",
          "description": "Fired when an update for the browser is available, but isn't installed immediately because a browser restart is required.",
          "deprecated": "Please use $(ref:runtime.onRestartRequired).",
          "parameters": []
        },
        {
          "name": "onConnect",
          "type": "function",
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "Fired when a connection is made from either an extension process or a content script.",
          "parameters": [
            {
              "$ref": "Port",
              "name": "port"
            }
          ]
        },
        {
          "name": "onConnectExternal",
          "type": "function",
          "description": "Fired when a connection is made from another extension.",
          "parameters": [
            {
              "$ref": "Port",
              "name": "port"
            }
          ]
        },
        {
          "name": "onMessage",
          "type": "function",
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "Fired when a message is sent from either an extension process or a content script.",
          "parameters": [
            {
              "name": "message",
              "type": "any",
              "optional": true,
              "description": "The message sent by the calling script."
            },
            {
              "name": "sender",
              "$ref": "MessageSender"
            },
            {
              "name": "sendResponse",
              "type": "function",
              "description": "Function to call (at most once) when you have a response. The argument should be any JSON-ifiable object. If you have more than one <code>onMessage</code> listener in the same document, then only one may send a response. This function becomes invalid when the event listener returns, unless you return true from the event listener to indicate you wish to send a response asynchronously (this will keep the message channel open to the other end until <code>sendResponse</code> is called)."
            }
          ],
          "returns": {
            "type": "boolean",
            "optional": true,
            "description": "Return true from the event listener if you wish to call <code>sendResponse</code> after the event listener returns."
          }
        },
        {
          "name": "onMessageExternal",
          "type": "function",
          "description": "Fired when a message is sent from another extension/app. Cannot be used in a content script.",
          "parameters": [
            {
              "name": "message",
              "type": "any",
              "optional": true,
              "description": "The message sent by the calling script."
            },
            {
              "name": "sender",
              "$ref": "MessageSender"
            },
            {
              "name": "sendResponse",
              "type": "function",
              "description": "Function to call (at most once) when you have a response. The argument should be any JSON-ifiable object. If you have more than one <code>onMessage</code> listener in the same document, then only one may send a response. This function becomes invalid when the event listener returns, unless you return true from the event listener to indicate you wish to send a response asynchronously (this will keep the message channel open to the other end until <code>sendResponse</code> is called)."
            }
          ],
          "returns": {
            "type": "boolean",
            "optional": true,
            "description": "Return true from the event listener if you wish to call <code>sendResponse</code> after the event listener returns."
          }
        },
        {
          "name": "onRestartRequired",
          "unsupported": true,
          "type": "function",
          "description": "Fired when an app or the device that it runs on needs to be restarted. The app should close all its windows at its earliest convenient time to let the restart to happen. If the app does nothing, a restart will be enforced after a 24-hour grace period has passed. Currently, this event is only fired for Chrome OS kiosk apps.",
          "parameters": [
            {
              "$ref": "OnRestartRequiredReason",
              "name": "reason",
              "description": "The reason that the event is being dispatched."
            }
          ]
        }
      ]
    }
  ],
  "theme.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "PermissionNoPrompt",
          "choices": [
            {
              "type": "string",
              "enum": [
                "theme"
              ]
            }
          ]
        },
        {
          "id": "ThemeColor",
          "description": "Defines a color value.",
          "choices": [
            {
              "type": "string",
              "description": "A string containing a valid `CSS color string <https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#color_keywords>`__, including hexadecimal or functional representations. For example the color *crimson* can be specified as: <li>``crimson`` <li>``#dc143c`` <li>``rgb(220, 20, 60)`` (or ``rgba(220, 20, 60, 0.5)`` to set 50% opacity) <li>``hsl(348, 83%, 47%)`` (or ``hsla(348, 83%, 47%, 0.5)`` to set 50% opacity)"
            },
            {
              "type": "array",
              "description": "An RGB array of 3 integers. For example ``[220, 20, 60]`` for the color *crimson*.",
              "minItems": 3,
              "maxItems": 3,
              "items": {
                "type": "integer",
                "minimum": 0,
                "maximum": 255
              }
            },
            {
              "type": "array",
              "description": "An RGBA array of 3 integers and a fractional (a float between 0 and 1). For example ``[220, 20, 60, 0.5]`` for the color *crimson* with 50% opacity.",
              "minItems": 4,
              "maxItems": 4,
              "items": {
                "type": "number"
              }
            }
          ]
        },
        {
          "id": "ThemeExperiment",
          "description": "Defines additional color, image and property keys to be used in :ref:`theme.ThemeType`, extending the theme-able areas of Thunderbird.",
          "type": "object",
          "properties": {
            "stylesheet": {
              "optional": true,
              "$ref": "ExtensionURL"
            },
            "images": {
              "type": "object",
              "optional": true,
              "additionalProperties": {
                "type": "string"
              }
            },
            "colors": {
              "type": "object",
              "optional": true,
              "additionalProperties": {
                "type": "string"
              }
            },
            "properties": {
              "type": "object",
              "optional": true,
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        {
          "id": "ThemeType",
          "description": "Contains the color, image and property settings of a theme.",
          "type": "object",
          "properties": {
            "images": {
              "description": "Object with one or more key-value pairs to map images to theme image keys. The following built-in theme image keys are supported:",
              "type": "object",
              "optional": true,
              "properties": {
                "additional_backgrounds": {
                  "type": "array",
                  "items": {
                    "$ref": "ImageDataOrExtensionURL"
                  },
                  "maxItems": 15,
                  "optional": true,
                  "description": "Additional images added to the header area and displayed behind the 'theme_frame' image."
                },
                "headerURL": {
                  "$ref": "ImageDataOrExtensionURL",
                  "optional": true,
                  "deprecated": "Unsupported images property, use 'theme.images.theme_frame', this alias is ignored in Thunderbird >= 70."
                },
                "theme_frame": {
                  "$ref": "ImageDataOrExtensionURL",
                  "optional": true,
                  "description": "Foreground image on the header area."
                }
              },
              "additionalProperties": {
                "$ref": "ImageDataOrExtensionURL"
              }
            },
            "colors": {
              "description": "Object with one or more key-value pairs to map color values to theme color keys. The following built-in theme color keys are supported:",
              "type": "object",
              "optional": true,
              "properties": {
                "tab_selected": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "Background color of the selected tab. Defaults to the color specified by ``toolbar``."
                },
                "accentcolor": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "deprecated": "Unsupported colors property, use 'theme.colors.frame', this alias is ignored in Thunderbird >= 70."
                },
                "frame": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The background color of the header area."
                },
                "frame_inactive": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The background color of the header area when the window is inactive."
                },
                "textcolor": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "deprecated": "Unsupported color property, use 'theme.colors.tab_background_text', this alias is ignored in Thunderbird >= 70."
                },
                "tab_background_text": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The text color of the unselected tabs."
                },
                "tab_background_separator": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The color of the vertical separator of the background tabs."
                },
                "tab_loading": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The color of the tab loading indicator."
                },
                "tab_text": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The text color for the selected tab.  Defaults to the color specified by ``toolbar_text``."
                },
                "tab_line": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The color of the selected tab line."
                },
                "toolbar": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The background color of the toolbars. Also used as default value for ``tab_selected``."
                },
                "toolbar_text": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The text color in the main Thunderbird toolbar. Also used as default value for ``icons`` and ``tab_text``."
                },
                "bookmark_text": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "Not used in Thunderbird."
                },
                "toolbar_field": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The background color for fields in the toolbar, such as the search field."
                },
                "toolbar_field_text": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The text color for fields in the toolbar."
                },
                "toolbar_field_border": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The border color for fields in the toolbar."
                },
                "toolbar_field_separator": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "Not used in Thunderbird.",
                  "deprecated": "This color property is ignored in >= 89."
                },
                "toolbar_top_separator": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The color of the line separating the top of the toolbar from the region above."
                },
                "toolbar_bottom_separator": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The color of the line separating the bottom of the toolbar from the region below."
                },
                "toolbar_vertical_separator": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The color of the vertical separators on the toolbars."
                },
                "icons": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The color of the toolbar icons. Defaults to the color specified by ``toolbar_text``."
                },
                "icons_attention": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The color of the toolbar icons in attention state such as the chat icon whith new messages."
                },
                "button_background_hover": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The color of the background of the toolbar buttons on hover."
                },
                "button_background_active": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The color of the background of the pressed toolbar buttons."
                },
                "popup": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The background color of popups such as the AppMenu."
                },
                "popup_text": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The text color of popups."
                },
                "popup_border": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The border color of popups."
                },
                "toolbar_field_focus": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The focused background color for fields in the toolbar."
                },
                "toolbar_field_text_focus": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The text color in the focused fields in the toolbar."
                },
                "toolbar_field_border_focus": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The focused border color for fields in the toolbar."
                },
                "popup_highlight": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The background color of items highlighted using the keyboard inside popups."
                },
                "popup_highlight_text": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The text color of items highlighted using the keyboard inside popups."
                },
                "ntp_background": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "Not used in Thunderbird."
                },
                "ntp_text": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "Not used in Thunderbird."
                },
                "sidebar": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The background color of the trees."
                },
                "sidebar_border": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The border color of the trees."
                },
                "sidebar_text": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The text color of the trees. Needed to enable the tree theming."
                },
                "sidebar_highlight": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The background color of highlighted rows in trees."
                },
                "sidebar_highlight_text": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The text color of highlighted rows in trees."
                },
                "sidebar_highlight_border": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The border color of highlighted rows in trees."
                },
                "toolbar_field_highlight": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The background color used to indicate the current selection of text in the search field."
                },
                "toolbar_field_highlight_text": {
                  "$ref": "ThemeColor",
                  "optional": true,
                  "description": "The color used to draw text that's currently selected in the search field."
                }
              },
              "additionalProperties": {
                "$ref": "ThemeColor"
              }
            },
            "properties": {
              "description": "Object with one or more key-value pairs to map property values to theme property keys. The following built-in theme property keys are supported:",
              "type": "object",
              "optional": true,
              "properties": {
                "additional_backgrounds_alignment": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "bottom",
                      "center",
                      "left",
                      "right",
                      "top",
                      "center bottom",
                      "center center",
                      "center top",
                      "left bottom",
                      "left center",
                      "left top",
                      "right bottom",
                      "right center",
                      "right top"
                    ]
                  },
                  "maxItems": 15,
                  "optional": true
                },
                "additional_backgrounds_tiling": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "no-repeat",
                      "repeat",
                      "repeat-x",
                      "repeat-y"
                    ]
                  },
                  "maxItems": 15,
                  "optional": true
                }
              },
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "additionalProperties": {
            "$ref": "UnrecognizedProperty"
          }
        },
        {
          "id": "ThemeManifest",
          "type": "object",
          "description": "Contents of manifest.json for a static theme",
          "$import": "manifest.ManifestBase",
          "properties": {
            "theme": {
              "$ref": "ThemeType"
            },
            "dark_theme": {
              "$ref": "ThemeType",
              "optional": true,
              "description": "Fallback properties for the dark system theme."
            },
            "default_locale": {
              "type": "string",
              "optional": true
            },
            "theme_experiment": {
              "$ref": "ThemeExperiment",
              "optional": true,
              "description": "CSS file with additional styles."
            },
            "icons": {
              "type": "object",
              "optional": true,
              "patternProperties": {
                "^[1-9]\\d*$": {
                  "type": "string"
                }
              },
              "description": "Icons shown in the Add-ons Manager."
            }
          }
        },
        {
          "$extend": "WebExtensionManifest",
          "properties": {
            "theme_experiment": {
              "$ref": "ThemeExperiment",
              "optional": true
            }
          }
        }
      ]
    },
    {
      "namespace": "theme",
      "description": "The theme API allows customizing of visual elements of Thunderbird.",
      "types": [
        {
          "id": "ThemeUpdateInfo",
          "type": "object",
          "description": "Info provided in the onUpdated listener.",
          "properties": {
            "theme": {
              "type": "object",
              "description": "The new theme after update"
            },
            "windowId": {
              "type": "integer",
              "description": "The id of the window the theme has been applied to",
              "optional": true
            }
          }
        }
      ],
      "events": [
        {
          "name": "onUpdated",
          "type": "function",
          "description": "Fired when a new theme has been applied",
          "parameters": [
            {
              "$ref": "ThemeUpdateInfo",
              "name": "updateInfo",
              "description": "Details of the theme update"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "getCurrent",
          "type": "function",
          "async": "callback",
          "description": "Returns the current theme for the specified window or the last focused window.",
          "parameters": [
            {
              "type": "integer",
              "name": "windowId",
              "optional": true,
              "description": "The window for which we want the theme."
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "ThemeType"
                }
              ]
            }
          ]
        },
        {
          "name": "update",
          "type": "function",
          "async": true,
          "description": "Make complete updates to the theme. Resolves when the update has completed.",
          "permissions": [
            "theme"
          ],
          "parameters": [
            {
              "type": "integer",
              "name": "windowId",
              "optional": true,
              "description": "The id of the window to update. No id updates all windows."
            },
            {
              "name": "details",
              "$ref": "manifest.ThemeType",
              "description": "The properties of the theme to update."
            }
          ]
        },
        {
          "name": "reset",
          "type": "function",
          "async": true,
          "description": "Removes the updates made to the theme.",
          "permissions": [
            "theme"
          ],
          "parameters": [
            {
              "type": "integer",
              "name": "windowId",
              "optional": true,
              "description": "The id of the window to reset. No id resets all windows."
            }
          ]
        }
      ]
    }
  ],
  "accounts.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "OptionalPermission",
          "choices": [
            {
              "type": "string",
              "enum": [
                "accountsRead"
              ]
            }
          ]
        }
      ]
    },
    {
      "namespace": "accounts",
      "permissions": [
        "accountsRead"
      ],
      "types": [
        {
          "id": "MailAccount",
          "description": "An object describing a mail account, as returned for example by the :ref:`accounts.list` and :ref:`accounts.get` methods. The ``folders`` property is only included if requested.",
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "A unique identifier for this account."
            },
            "name": {
              "type": "string",
              "description": "The human-friendly name of this account."
            },
            "type": {
              "type": "string",
              "description": "What sort of account this is, e.g. ``imap``, ``nntp``, or ``pop3``."
            },
            "folders": {
              "type": "array",
              "optional": true,
              "description": "The folders for this account are only included if requested.",
              "items": {
                "$ref": "folders.MailFolder"
              }
            },
            "identities": {
              "type": "array",
              "description": "The identities associated with this account. The default identity is listed first, others in no particular order.",
              "items": {
                "$ref": "identities.MailIdentity"
              }
            }
          }
        }
      ],
      "functions": [
        {
          "name": "list",
          "type": "function",
          "description": "Returns all mail accounts.",
          "async": "callback",
          "parameters": [
            {
              "name": "includeFolders",
              "description": "Specifies whether the returned :ref:`accounts.MailAccount` objects should included their account's folders. Defaults to ``true``.",
              "optional": true,
              "default": true,
              "type": "boolean"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "accounts.MailAccount"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "description": "Returns details of the requested account, or null if it doesn't exist.",
          "async": "callback",
          "parameters": [
            {
              "name": "accountId",
              "type": "string"
            },
            {
              "name": "includeFolders",
              "description": "Specifies whether the returned :ref:`accounts.MailAccount` object should included the account's folders. Defaults to ``true``.",
              "optional": true,
              "default": true,
              "type": "boolean"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "accounts.MailAccount",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "name": "getDefault",
          "type": "function",
          "description": "Returns the default account, or null if it is not defined.",
          "async": "callback",
          "parameters": [
            {
              "name": "includeFolders",
              "description": "Specifies whether the returned :ref:`accounts.MailAccount` object should included the account's folders. Defaults to ``true``.",
              "optional": true,
              "default": true,
              "type": "boolean"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "accounts.MailAccount",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "name": "setDefaultIdentity",
          "type": "function",
          "description": "Sets the default identity for an account.",
          "async": true,
          "deprecated": "This will be removed. Use :ref:`identities.setDefault` instead.",
          "parameters": [
            {
              "name": "accountId",
              "type": "string"
            },
            {
              "name": "identityId",
              "type": "string"
            }
          ]
        },
        {
          "name": "getDefaultIdentity",
          "type": "function",
          "description": "Returns the default identity for an account, or null if it is not defined.",
          "async": "callback",
          "deprecated": "This will be removed. Use :ref:`identities.getDefault` instead.",
          "parameters": [
            {
              "name": "accountId",
              "type": "string"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "identities.MailIdentity"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "addressBook.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "OptionalPermission",
          "choices": [
            {
              "type": "string",
              "enum": [
                "addressBooks"
              ]
            }
          ]
        }
      ]
    },
    {
      "namespace": "addressBooks",
      "permissions": [
        "addressBooks"
      ],
      "types": [
        {
          "id": "NodeType",
          "type": "string",
          "enum": [
            "addressBook",
            "contact",
            "mailingList"
          ],
          "description": "Indicates the type of a Node, which can be one of <code>addressBook</code>, <code>contact</code>, or <code>mailingList</code>."
        },
        {
          "id": "AddressBookNode",
          "type": "object",
          "description": "A node representing an address book.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for the node. IDs are unique within the current profile, and they remain valid even after the program is restarted."
            },
            "parentId": {
              "type": "string",
              "optional": true,
              "description": "The <code>id</code> of the parent object."
            },
            "type": {
              "$ref": "NodeType",
              "description": "Always set to <code>addressBook</code>."
            },
            "readOnly": {
              "type": "boolean",
              "optional": true,
              "description": "Indicates if the object is read-only."
            },
            "remote": {
              "type": "boolean",
              "optional": true,
              "description": "Indicates if the address book is accessed via remote look-up."
            },
            "name": {
              "type": "string"
            },
            "contacts": {
              "type": "array",
              "optional": true,
              "items": {
                "$ref": "contacts.ContactNode"
              },
              "description": "A list of contacts held by this node's address book or mailing list."
            },
            "mailingLists": {
              "type": "array",
              "optional": true,
              "items": {
                "$ref": "mailingLists.MailingListNode"
              },
              "description": "A list of mailingLists in this node's address book."
            }
          }
        }
      ],
      "functions": [
        {
          "name": "openUI",
          "type": "function",
          "async": true,
          "description": "Opens the address book user interface.",
          "parameters": []
        },
        {
          "name": "closeUI",
          "type": "function",
          "async": true,
          "description": "Closes the address book user interface.",
          "parameters": []
        },
        {
          "name": "list",
          "type": "function",
          "async": "callback",
          "parameters": [
            {
              "name": "complete",
              "type": "boolean",
              "optional": true,
              "default": false,
              "description": "If set to true, results will include contacts and mailing lists for each address book."
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "AddressBookNode"
                  }
                }
              ]
            }
          ],
          "description": "Gets a list of the user's address books, optionally including all contacts and mailing lists."
        },
        {
          "name": "get",
          "type": "function",
          "async": "callback",
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "complete",
              "type": "boolean",
              "optional": true,
              "default": false,
              "description": "If set to true, results will include contacts and mailing lists for this address book."
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "AddressBookNode"
                }
              ]
            }
          ],
          "description": "Gets a single address book, optionally including all contacts and mailing lists."
        },
        {
          "name": "create",
          "type": "function",
          "async": "callback",
          "parameters": [
            {
              "name": "properties",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "string",
                  "description": "The id of the new address book."
                }
              ]
            }
          ],
          "description": "Creates a new, empty address book."
        },
        {
          "name": "update",
          "type": "function",
          "async": true,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "properties",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                }
              }
            }
          ],
          "description": "Renames an address book."
        },
        {
          "name": "delete",
          "type": "function",
          "async": true,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "description": "Removes an address book, and all associated contacts and mailing lists."
        }
      ],
      "events": [
        {
          "name": "onCreated",
          "type": "function",
          "description": "Fired when an address book is created.",
          "parameters": [
            {
              "name": "node",
              "$ref": "AddressBookNode"
            }
          ]
        },
        {
          "name": "onUpdated",
          "type": "function",
          "description": "Fired when an address book is renamed.",
          "parameters": [
            {
              "name": "node",
              "$ref": "AddressBookNode"
            }
          ]
        },
        {
          "name": "onDeleted",
          "type": "function",
          "description": "Fired when an addressBook is deleted.",
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "namespace": "addressBooks.provider",
      "permissions": [
        "addressBooks"
      ],
      "events": [
        {
          "name": "onSearchRequest",
          "type": "function",
          "description": "Registering this listener will create and list a read-only address book in Thunderbird's address book window, similar to LDAP address books. When selecting this address book, users will first see no contacts, but they can search for them, which will fire this event. Contacts returned by the listener callback will be displayed as contact cards in the address book. Several listeners can be registered, to create multiple address books.\n\nThe event also fires for each registered listener (for each created read-only address book), when users type something into the mail composer's <code>To:</code> field, or into similar fields like the calendar meeting attendees field. Contacts returned by the listener callback will be added to the autocomplete results in the dropdown of that field.\n\nExample: <literalinclude>includes/addressBooks/onSearchRequest.js<lang>JavaScript</lang></literalinclude>",
          "parameters": [
            {
              "name": "node",
              "$ref": "AddressBookNode"
            },
            {
              "name": "searchString",
              "description": "The search text that the user entered. Not available when invoked from the advanced address book search dialog.",
              "type": "string",
              "optional": true
            },
            {
              "name": "query",
              "type": "string",
              "description": "The boolean query expression corresponding to the search. Note: This parameter may change in future releases of Thunderbird.",
              "optional": true
            }
          ],
          "extraParameters": [
            {
              "name": "parameters",
              "description": "Descriptions for the address book created by registering this listener.",
              "type": "object",
              "properties": {
                "addressBookName": {
                  "type": "string",
                  "optional": true,
                  "description": "The name of the created address book."
                },
                "isSecure": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether the address book search queries are using encrypted protocols like HTTPS."
                },
                "id": {
                  "type": "string",
                  "optional": true,
                  "description": "The unique ID of the created address book. If several listeners have been added, the ``id`` allows to identify which address book initiated the search request. If not provided, a unique ID will be generated for you."
                }
              }
            }
          ]
        }
      ]
    },
    {
      "namespace": "contacts",
      "permissions": [
        "addressBooks"
      ],
      "types": [
        {
          "id": "ContactNode",
          "type": "object",
          "description": "A node representing a contact in an address book.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for the node. IDs are unique within the current profile, and they remain valid even after the program is restarted."
            },
            "parentId": {
              "type": "string",
              "optional": true,
              "description": "The <code>id</code> of the parent object."
            },
            "type": {
              "$ref": "addressBooks.NodeType",
              "description": "Always set to <code>contact</code>."
            },
            "readOnly": {
              "type": "boolean",
              "optional": true,
              "description": "Indicates if the object is read-only."
            },
            "remote": {
              "type": "boolean",
              "optional": true,
              "description": "Indicates if the object came from a remote address book."
            },
            "properties": {
              "$ref": "ContactProperties"
            }
          }
        },
        {
          "id": "ContactProperties",
          "type": "object",
          "description": "A set of properties for a particular contact. For a complete list of properties that Thunderbird uses, see https://hg.mozilla.org/comm-central/file/tip/mailnews/addrbook/public/nsIAbCard.idl\nIt is also possible to store custom properties. The custom property name however may only use a to z, A to Z, 1 to 9 and underscores.",
          "patternProperties": {
            "^\\w+$": {
              "choices": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        {
          "id": "PropertyChange",
          "type": "object",
          "description": "A dictionary of changed properties. Keys are the property name that changed, values are an object containing ``oldValue`` and ``newValue``. Values can be either a string or null.",
          "patternProperties": {
            "^\\w+$": {
              "type": "object",
              "properties": {
                "oldValue": {
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "newValue": {
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          }
        }
      ],
      "functions": [
        {
          "name": "list",
          "type": "function",
          "async": "callback",
          "parameters": [
            {
              "name": "parentId",
              "type": "string"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "ContactNode"
                  }
                }
              ]
            }
          ],
          "description": "Gets all the contacts in the address book with the id <code>parentId</code>."
        },
        {
          "name": "quickSearch",
          "type": "function",
          "async": "callback",
          "parameters": [
            {
              "name": "parentId",
              "type": "string",
              "optional": true,
              "description": "The id of the address book to search. If not specified, all address books are searched."
            },
            {
              "name": "queryInfo",
              "choices": [
                {
                  "type": "string",
                  "description": "One or more space-separated terms to search for."
                },
                {
                  "type": "object",
                  "properties": {
                    "searchString": {
                      "type": "string",
                      "optional": true,
                      "description": "One or more space-separated terms to search for."
                    },
                    "includeLocal": {
                      "type": "boolean",
                      "optional": true,
                      "default": true,
                      "description": "Whether to include results from local address books. Defaults to true."
                    },
                    "includeRemote": {
                      "type": "boolean",
                      "optional": true,
                      "default": true,
                      "description": "Whether to include results from remote address books. Defaults to true."
                    },
                    "includeReadOnly": {
                      "type": "boolean",
                      "optional": true,
                      "default": true,
                      "description": "Whether to include results from read-only address books. Defaults to true."
                    },
                    "includeReadWrite": {
                      "type": "boolean",
                      "optional": true,
                      "default": true,
                      "description": "Whether to include results from read-write address books. Defaults to true."
                    }
                  }
                }
              ]
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "ContactNode"
                  }
                }
              ]
            }
          ],
          "description": "Gets all contacts matching ``queryInfo`` in the address book with the id ``parentId``."
        },
        {
          "name": "get",
          "type": "function",
          "async": "callback",
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "ContactNode"
                }
              ]
            }
          ],
          "description": "Gets a single contact."
        },
        {
          "name": "create",
          "type": "function",
          "async": "callback",
          "parameters": [
            {
              "name": "parentId",
              "type": "string"
            },
            {
              "name": "id",
              "type": "string",
              "description": "Assigns the contact an id. If an existing contact has this id, an exception is thrown.",
              "optional": true
            },
            {
              "name": "properties",
              "$ref": "ContactProperties"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "string",
                  "description": "The ID of the new contact."
                }
              ]
            }
          ],
          "description": "Adds a new contact to the address book with the id <code>parentId</code>."
        },
        {
          "name": "update",
          "type": "function",
          "async": true,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "properties",
              "$ref": "ContactProperties"
            }
          ],
          "description": "Edits the properties of a contact. To remove a property, specify it as <code>null</code>."
        },
        {
          "name": "delete",
          "type": "function",
          "async": true,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "description": "Removes a contact from the address book. The contact is also removed from any mailing lists it is a member of."
        }
      ],
      "events": [
        {
          "name": "onCreated",
          "type": "function",
          "description": "Fired when a contact is created.",
          "parameters": [
            {
              "name": "node",
              "$ref": "ContactNode"
            },
            {
              "name": "id",
              "type": "string"
            }
          ]
        },
        {
          "name": "onUpdated",
          "type": "function",
          "description": "Fired when a contact is changed.",
          "parameters": [
            {
              "name": "node",
              "$ref": "ContactNode"
            },
            {
              "name": "changedProperties",
              "$ref": "PropertyChange"
            }
          ]
        },
        {
          "name": "onDeleted",
          "type": "function",
          "description": "Fired when a contact is removed from an address book.",
          "parameters": [
            {
              "name": "parentId",
              "type": "string"
            },
            {
              "name": "id",
              "type": "string"
            }
          ]
        }
      ]
    },
    {
      "namespace": "mailingLists",
      "permissions": [
        "addressBooks"
      ],
      "types": [
        {
          "id": "MailingListNode",
          "type": "object",
          "description": "A node representing a mailing list.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier for the node. IDs are unique within the current profile, and they remain valid even after the program is restarted."
            },
            "parentId": {
              "type": "string",
              "optional": true,
              "description": "The <code>id</code> of the parent object."
            },
            "type": {
              "$ref": "addressBooks.NodeType",
              "description": "Always set to <code>mailingList</code>."
            },
            "readOnly": {
              "type": "boolean",
              "optional": true,
              "description": "Indicates if the object is read-only."
            },
            "remote": {
              "type": "boolean",
              "optional": true,
              "description": "Indicates if the object came from a remote address book."
            },
            "name": {
              "type": "string"
            },
            "nickName": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "contacts": {
              "type": "array",
              "optional": true,
              "items": {
                "$ref": "contacts.ContactNode"
              },
              "description": "A list of contacts held by this node's address book or mailing list."
            }
          }
        }
      ],
      "functions": [
        {
          "name": "list",
          "type": "function",
          "async": "callback",
          "parameters": [
            {
              "name": "parentId",
              "type": "string"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "MailingListNode"
                  }
                }
              ]
            }
          ],
          "description": "Gets all the mailing lists in the address book with id <code>parentId</code>."
        },
        {
          "name": "get",
          "type": "function",
          "async": "callback",
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "MailingListNode"
                }
              ]
            }
          ],
          "description": "Gets a single mailing list."
        },
        {
          "name": "create",
          "type": "function",
          "async": "callback",
          "parameters": [
            {
              "name": "parentId",
              "type": "string"
            },
            {
              "name": "properties",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "nickName": {
                  "type": "string",
                  "optional": true
                },
                "description": {
                  "type": "string",
                  "optional": true
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "string",
                  "description": "The ID of the new mailing list."
                }
              ]
            }
          ],
          "description": "Creates a new mailing list in the address book with id <code>parentId</code>."
        },
        {
          "name": "update",
          "type": "function",
          "async": true,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "properties",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "nickName": {
                  "type": "string",
                  "optional": true
                },
                "description": {
                  "type": "string",
                  "optional": true
                }
              }
            }
          ],
          "description": "Edits the properties of a mailing list."
        },
        {
          "name": "delete",
          "type": "function",
          "async": true,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            }
          ],
          "description": "Removes the mailing list."
        },
        {
          "name": "addMember",
          "type": "function",
          "async": true,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "contactId",
              "type": "string"
            }
          ],
          "description": "Adds a contact to the mailing list with id <code>id</code>. If the contact and mailing list are in different address books, the contact will also be copied to the list's address book."
        },
        {
          "name": "listMembers",
          "type": "function",
          "async": "callback",
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "contacts.ContactNode"
                  }
                }
              ]
            }
          ],
          "description": "Gets all contacts that are members of the mailing list with id <code>id</code>."
        },
        {
          "name": "removeMember",
          "type": "function",
          "async": true,
          "parameters": [
            {
              "name": "id",
              "type": "string"
            },
            {
              "name": "contactId",
              "type": "string"
            }
          ],
          "description": "Removes a contact from the mailing list with id <code>id</code>. This does not delete the contact from the address book."
        }
      ],
      "events": [
        {
          "name": "onCreated",
          "type": "function",
          "description": "Fired when a mailing list is created.",
          "parameters": [
            {
              "name": "node",
              "$ref": "MailingListNode"
            }
          ]
        },
        {
          "name": "onUpdated",
          "type": "function",
          "description": "Fired when a mailing list is changed.",
          "parameters": [
            {
              "name": "node",
              "$ref": "MailingListNode"
            }
          ]
        },
        {
          "name": "onDeleted",
          "type": "function",
          "description": "Fired when a mailing list is deleted.",
          "parameters": [
            {
              "name": "parentId",
              "type": "string"
            },
            {
              "name": "id",
              "type": "string"
            }
          ]
        },
        {
          "name": "onMemberAdded",
          "type": "function",
          "description": "Fired when a contact is added to the mailing list.",
          "parameters": [
            {
              "name": "node",
              "$ref": "contacts.ContactNode"
            }
          ]
        },
        {
          "name": "onMemberRemoved",
          "type": "function",
          "description": "Fired when a contact is removed from the mailing list.",
          "parameters": [
            {
              "name": "parentId",
              "type": "string"
            },
            {
              "name": "id",
              "type": "string"
            }
          ]
        }
      ]
    }
  ],
  "browserAction.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "WebExtensionManifest",
          "properties": {
            "browser_action": {
              "type": "object",
              "additionalProperties": {
                "$ref": "UnrecognizedProperty"
              },
              "properties": {
                "default_label": {
                  "type": "string",
                  "description": "The label of the browserAction, defaults to its title. Can be set to an empty string to not display any label. If the containing toolbar is configured to display text only, the title will be used as fallback.",
                  "optional": true,
                  "preprocess": "localize"
                },
                "default_title": {
                  "type": "string",
                  "description": "The title of the browserAction. This shows up in the tooltip and the label. Defaults to the add-on name.",
                  "optional": true,
                  "preprocess": "localize"
                },
                "default_icon": {
                  "$ref": "IconPath",
                  "description": "The icon for the messageDisplayAction.",
                  "optional": true
                },
                "theme_icons": {
                  "type": "array",
                  "optional": true,
                  "minItems": 1,
                  "items": {
                    "$ref": "ThemeIcons"
                  },
                  "description": "Specifies icons to use for dark and light themes"
                },
                "default_popup": {
                  "type": "string",
                  "format": "relativeUrl",
                  "optional": true,
                  "description": "The html document to be opened as a popup when the user clicks on the browserAction's icon.",
                  "preprocess": "localize"
                },
                "browser_style": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Enable browser styles. See the `MDN documentation on browser styles <https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/user_interface/Browser_styles>`__ for more information.",
                  "default": false
                },
                "default_area": {
                  "description": "Defines the location the browserAction will appear. The default location is ``maintoolbar``.",
                  "type": "string",
                  "enum": [
                    "maintoolbar",
                    "tabstoolbar"
                  ],
                  "optional": true
                }
              },
              "optional": true
            }
          }
        }
      ]
    },
    {
      "namespace": "browserAction",
      "description": "Use a browserAction to put an icon in the mail window toolbar. In addition to its icon, a browserAction can also have a tooltip, a badge, and a popup. This namespace is called browserAction for compatibility with browser WebExtensions.",
      "permissions": [
        "manifest:browser_action"
      ],
      "types": [
        {
          "id": "Details",
          "type": "object",
          "description": "Specifies to which tab or window the value should be set, or from which one it should be retrieved. If no tab nor window is specified, the global value is set or retrieved.",
          "properties": {
            "tabId": {
              "type": "integer",
              "optional": true,
              "minimum": 0,
              "description": "When setting a value, it will be specific to the specified tab, and will automatically reset when the tab navigates. When getting, specifies the tab to get the value from; if there is no tab-specific value, the window one will be inherited."
            },
            "windowId": {
              "type": "integer",
              "optional": true,
              "minimum": -2,
              "description": "When setting a value, it will be specific to the specified window. When getting, specifies the window to get the value from; if there is no window-specific value, the global one will be inherited."
            }
          }
        },
        {
          "id": "ColorArray",
          "description": "An array of four integers in the range [0,255] that make up the RGBA color. For example, opaque red is <code>[255, 0, 0, 255]</code>.",
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "minItems": 4,
          "maxItems": 4
        },
        {
          "id": "ImageDataType",
          "type": "object",
          "isInstanceOf": "ImageData",
          "additionalProperties": {
            "type": "any"
          },
          "postprocess": "convertImageDataToURL",
          "description": "Pixel data for an image. Must be an ImageData object (for example, from a <code>canvas</code> element)."
        },
        {
          "id": "ImageDataDictionary",
          "type": "object",
          "description": "A ``{size: ImageDataType}`` dictionary representing the icon to be set. The actual :ref:`browserAction.ImageDataType` to be used is chosen depending on the screen's pixel density. See the `MDN documentation on browser styles <https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/user_interface/Browser_styles>`__ for more information on this. At least one :ref:`browserAction.ImageDataType` must be specified.",
          "patternProperties": {
            "^[1-9]\\d*$": {
              "$ref": "ImageDataType"
            }
          }
        },
        {
          "id": "OnClickData",
          "type": "object",
          "description": "Information sent when a browser action is clicked.",
          "properties": {
            "modifiers": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Shift",
                  "Alt",
                  "Command",
                  "Ctrl",
                  "MacCtrl"
                ]
              },
              "description": "An array of keyboard modifiers that were held while the menu item was clicked."
            },
            "button": {
              "type": "integer",
              "optional": true,
              "description": "An integer value of button by which menu item was clicked."
            }
          }
        }
      ],
      "functions": [
        {
          "name": "setTitle",
          "type": "function",
          "description": "Sets the title of the browserAction. This shows up in the tooltip and the label. Defaults to the add-on name.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "type": "object",
              "$import": "Details",
              "properties": {
                "title": {
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "The string the browserAction should display as its label and when moused over."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "getTitle",
          "type": "function",
          "description": "Gets the title of the browserAction.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "$ref": "Details"
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "result",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "name": "setLabel",
          "type": "function",
          "description": "Sets the label of the browserAction, defaults to its title. Can be set to an empty string to not display any label. If the containing toolbar is configured to display text only, the title will be used as fallback.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "type": "object",
              "$import": "Details",
              "properties": {
                "label": {
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "The string the browserAction should use as label. Can be set to an empty string to not display any label. If the containing toolbar is configured to display text only, the title will be used as fallback."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "getLabel",
          "type": "function",
          "description": "Gets the label of the browserAction.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "$ref": "Details"
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "result",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "name": "setIcon",
          "type": "function",
          "description": "Sets the icon for the browserAction. The icon can be specified either as the path to an image file or as the pixel data from a canvas element, or as dictionary of either one of those. Either the <b>path</b> or the <b>imageData</b> property must be specified.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "type": "object",
              "$import": "Details",
              "properties": {
                "imageData": {
                  "choices": [
                    {
                      "$ref": "ImageDataType"
                    },
                    {
                      "$ref": "ImageDataDictionary"
                    }
                  ],
                  "optional": true,
                  "description": "Either an ImageDataType object defining a single icon used for all sizes or an ImageDataDictionary object defining dedicated icons for different sizes."
                },
                "path": {
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "manifest.IconPath"
                    }
                  ],
                  "optional": true,
                  "description": "Either a relative image path defining a single icon used for all sizes or an IconPathDictionary object defining dedicated icons for different sizes."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "setPopup",
          "type": "function",
          "description": "Sets the html document to be opened as a popup when the user clicks on the browserAction's icon.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "type": "object",
              "$import": "Details",
              "properties": {
                "popup": {
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "The html file to show in a popup.  If set to the empty string (''), no popup is shown."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "getPopup",
          "type": "function",
          "description": "Gets the html document set as the popup for this browserAction.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "$ref": "Details"
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "result",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "name": "setBadgeText",
          "type": "function",
          "description": "Sets the badge text for the browserAction. The badge is displayed on top of the icon.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "type": "object",
              "$import": "Details",
              "properties": {
                "text": {
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "Any number of characters can be passed, but only about four can fit in the space."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "getBadgeText",
          "type": "function",
          "description": "Gets the badge text of the browserAction. If no tab nor window is specified, the global badge text is returned.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "$ref": "Details"
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "result",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "name": "setBadgeBackgroundColor",
          "type": "function",
          "description": "Sets the background color for the badge.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "type": "object",
              "$import": "Details",
              "properties": {
                "color": {
                  "description": "An array of four integers in the range [0,255] that make up the RGBA color of the badge. For example, opaque red is <code>[255, 0, 0, 255]</code>. Can also be a string with a CSS value, with opaque red being <code>#FF0000</code> or <code>#F00</code>.",
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "ColorArray"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "getBadgeBackgroundColor",
          "type": "function",
          "description": "Gets the background color of the browserAction.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "$ref": "Details"
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "result",
                  "$ref": "ColorArray"
                }
              ]
            }
          ]
        },
        {
          "name": "enable",
          "type": "function",
          "description": "Enables the browserAction for a tab. By default, a browserAction is enabled.",
          "async": "callback",
          "parameters": [
            {
              "type": "integer",
              "optional": true,
              "name": "tabId",
              "minimum": 0,
              "description": "The id of the tab for which you want to modify the browserAction."
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "disable",
          "type": "function",
          "description": "Disables the browserAction for a tab.",
          "async": "callback",
          "parameters": [
            {
              "type": "integer",
              "optional": true,
              "name": "tabId",
              "minimum": 0,
              "description": "The id of the tab for which you want to modify the browserAction."
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "isEnabled",
          "type": "function",
          "description": "Checks whether the browserAction is enabled.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "$ref": "Details"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "boolean"
                }
              ]
            }
          ]
        },
        {
          "name": "openPopup",
          "type": "function",
          "requireUserInput": true,
          "description": "Opens the extension popup window in the active window.",
          "async": true,
          "parameters": []
        }
      ],
      "events": [
        {
          "name": "onClicked",
          "type": "function",
          "description": "Fired when a browserAction icon is clicked.  This event will not fire if the browserAction has a popup. This is a user input event handler. For asynchronous listeners some `restrictions <https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/User_actions>`__ apply.",
          "parameters": [
            {
              "name": "tab",
              "$ref": "tabs.Tab"
            },
            {
              "name": "info",
              "$ref": "OnClickData",
              "optional": true
            }
          ]
        }
      ]
    }
  ],
  "chrome_settings_overrides.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "WebExtensionManifest",
          "properties": {
            "chrome_settings_overrides": {
              "type": "object",
              "optional": true,
              "additionalProperties": {
                "$ref": "UnrecognizedProperty"
              },
              "properties": {
                "search_provider": {
                  "type": "object",
                  "optional": true,
                  "additionalProperties": {
                    "$ref": "UnrecognizedProperty"
                  },
                  "properties": {
                    "name": {
                      "type": "string",
                      "preprocess": "localize"
                    },
                    "keyword": {
                      "optional": true,
                      "choices": [
                        {
                          "type": "string",
                          "preprocess": "localize"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "preprocess": "localize"
                          },
                          "minItems": 1
                        }
                      ]
                    },
                    "search_url": {
                      "type": "string",
                      "format": "url",
                      "pattern": "^https://.*$",
                      "preprocess": "localize"
                    },
                    "favicon_url": {
                      "type": "string",
                      "optional": true,
                      "format": "url",
                      "preprocess": "localize"
                    },
                    "suggest_url": {
                      "type": "string",
                      "optional": true,
                      "pattern": "^https://.*$|^$",
                      "preprocess": "localize"
                    },
                    "instant_url": {
                      "type": "string",
                      "optional": true,
                      "format": "url",
                      "preprocess": "localize",
                      "deprecated": "Unsupported on Thunderbird at this time."
                    },
                    "image_url": {
                      "type": "string",
                      "optional": true,
                      "format": "url",
                      "preprocess": "localize",
                      "deprecated": "Unsupported on Thunderbird at this time."
                    },
                    "search_url_get_params": {
                      "type": "string",
                      "optional": true,
                      "preprocess": "localize",
                      "description": "GET parameters to the search_url as a query string."
                    },
                    "search_url_post_params": {
                      "type": "string",
                      "optional": true,
                      "preprocess": "localize",
                      "description": "POST parameters to the search_url as a query string."
                    },
                    "suggest_url_get_params": {
                      "type": "string",
                      "optional": true,
                      "preprocess": "localize",
                      "description": "GET parameters to the suggest_url as a query string."
                    },
                    "suggest_url_post_params": {
                      "type": "string",
                      "optional": true,
                      "preprocess": "localize",
                      "description": "POST parameters to the suggest_url as a query string."
                    },
                    "instant_url_post_params": {
                      "type": "string",
                      "optional": true,
                      "preprocess": "localize",
                      "deprecated": "Unsupported on Thunderbird at this time."
                    },
                    "image_url_post_params": {
                      "type": "string",
                      "optional": true,
                      "preprocess": "localize",
                      "deprecated": "Unsupported on Thunderbird at this time."
                    },
                    "search_form": {
                      "type": "string",
                      "optional": true,
                      "format": "url",
                      "pattern": "^https://.*$",
                      "preprocess": "localize"
                    },
                    "alternate_urls": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "url",
                        "preprocess": "localize"
                      },
                      "optional": true,
                      "deprecated": "Unsupported on Thunderbird at this time."
                    },
                    "prepopulated_id": {
                      "type": "integer",
                      "optional": true,
                      "deprecated": "Unsupported on Thunderbird."
                    },
                    "encoding": {
                      "type": "string",
                      "optional": true,
                      "description": "Encoding of the search term."
                    },
                    "is_default": {
                      "type": "boolean",
                      "optional": true,
                      "description": "Sets the default engine to a built-in engine only."
                    },
                    "params": {
                      "optional": true,
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "A url parameter name"
                          },
                          "condition": {
                            "type": "string",
                            "optional": true,
                            "enum": [
                              "purpose",
                              "pref"
                            ],
                            "description": "The type of param can be either \"purpose\" or \"pref\"."
                          },
                          "pref": {
                            "type": "string",
                            "optional": true,
                            "description": "The preference to retrieve the value from."
                          },
                          "purpose": {
                            "type": "string",
                            "optional": true,
                            "enum": [
                              "contextmenu",
                              "searchbar",
                              "homepage",
                              "keyword",
                              "newtab"
                            ],
                            "description": "The context that initiates a search, required if condition is \"purpose\"."
                          },
                          "value": {
                            "type": "string",
                            "optional": true,
                            "description": "A url parameter value.",
                            "preprocess": "localize"
                          }
                        }
                      },
                      "description": "A list of optional search url parameters. This allows the addition of search url parameters based on how the search is performed in Thunderbird."
                    }
                  }
                }
              }
            }
          }
        }
      ]
    }
  ],
  "cloudFile.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "WebExtensionManifest",
          "properties": {
            "cloud_file": {
              "type": "object",
              "additionalProperties": {
                "$ref": "UnrecognizedProperty"
              },
              "properties": {
                "browser_style": {
                  "type": "boolean",
                  "description": "Enable browser styles. See the `MDN documentation <https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/user_interface/Browser_styles>`__ for more information.",
                  "optional": true,
                  "default": false
                },
                "data_format": {
                  "type": "string",
                  "optional": true,
                  "default": "ArrayBuffer",
                  "description": "Determines the format of the ``data`` argument in ``onFileUpload``.",
                  "enum": [
                    "ArrayBuffer",
                    "File"
                  ]
                },
                "management_url": {
                  "type": "string",
                  "format": "relativeUrl",
                  "preprocess": "localize",
                  "description": "A page for configuring accounts, to be displayed in the preferences UI. **Note:** Within this UI only a limited subset of the WebExtension APIs is available: ``cloudFile``, ``extension``, ``i18n``, ``runtime``, ``storage``, ``test``."
                },
                "name": {
                  "type": "string",
                  "preprocess": "localize",
                  "description": "Name of the cloud file service."
                },
                "new_account_url": {
                  "type": "string",
                  "optional": true,
                  "deprecated": true,
                  "description": "This property was never used."
                },
                "service_url": {
                  "type": "string",
                  "optional": true,
                  "description": "URL to the web page of the cloud file service."
                }
              },
              "optional": true
            }
          }
        }
      ]
    },
    {
      "namespace": "cloudFile",
      "permissions": [
        "manifest:cloud_file"
      ],
      "allowedContexts": [
        "content"
      ],
      "events": [
        {
          "name": "onFileUpload",
          "type": "function",
          "description": "Fired when a file should be uploaded to the cloud file provider",
          "parameters": [
            {
              "name": "account",
              "$ref": "CloudFileAccount",
              "description": "The created account"
            },
            {
              "name": "fileInfo",
              "$ref": "CloudFile",
              "description": "The file to upload"
            },
            {
              "name": "tab",
              "$ref": "tabs.Tab",
              "description": "The tab where the upload was initiated. Currently only available for the message composer."
            }
          ],
          "returns": {
            "type": "object",
            "properties": {
              "aborted": {
                "type": "boolean",
                "description": "Set this to true if the file upload was aborted",
                "optional": true
              },
              "url": {
                "type": "string",
                "description": "The URL where the uploaded file can be accessed",
                "optional": true
              }
            }
          }
        },
        {
          "name": "onFileUploadAbort",
          "type": "function",
          "parameters": [
            {
              "name": "account",
              "$ref": "CloudFileAccount",
              "description": "The created account"
            },
            {
              "type": "integer",
              "name": "fileId",
              "minimum": 1,
              "description": "An identifier for this file"
            },
            {
              "name": "tab",
              "$ref": "tabs.Tab",
              "description": "The tab where the upload was initiated. Currently only available for the message composer."
            }
          ]
        },
        {
          "name": "onFileDeleted",
          "type": "function",
          "description": "Fired when a file previously uploaded should be deleted",
          "parameters": [
            {
              "name": "account",
              "$ref": "CloudFileAccount",
              "description": "The created account"
            },
            {
              "type": "integer",
              "name": "fileId",
              "minimum": 1,
              "description": "An identifier for this file"
            },
            {
              "name": "tab",
              "$ref": "tabs.Tab",
              "description": "The tab where the upload was initiated. Currently only available for the message composer."
            }
          ]
        },
        {
          "name": "onAccountAdded",
          "type": "function",
          "description": "Fired when a cloud file account of this add-on was created",
          "parameters": [
            {
              "name": "account",
              "$ref": "CloudFileAccount",
              "description": "The created account"
            }
          ]
        },
        {
          "name": "onAccountDeleted",
          "type": "function",
          "description": "Fired when a cloud file account of this add-on was deleted",
          "parameters": [
            {
              "name": "accountId",
              "type": "string",
              "description": "The id of the removed account"
            }
          ]
        }
      ],
      "types": [
        {
          "id": "CloudFileAccount",
          "type": "object",
          "description": "Information about a cloud file account",
          "properties": {
            "id": {
              "type": "string",
              "description": "Unique identifier of the account"
            },
            "configured": {
              "type": "boolean",
              "description": "If true, the account is configured and ready to use. Only configured accounts are offered to the user."
            },
            "name": {
              "type": "string",
              "description": "A user-friendly name for this account."
            },
            "uploadSizeLimit": {
              "type": "integer",
              "minimum": -1,
              "optional": true,
              "description": "The maximum size in bytes for a single file to upload. Set to -1 if unlimited."
            },
            "spaceRemaining": {
              "type": "integer",
              "minimum": -1,
              "optional": true,
              "description": "The amount of remaining space on the cloud provider, in bytes. Set to -1 if unsupported."
            },
            "spaceUsed": {
              "type": "integer",
              "minimum": -1,
              "optional": true,
              "description": "The amount of space already used on the cloud provider, in bytes. Set to -1 if unsupported."
            },
            "managementUrl": {
              "type": "string",
              "format": "relativeUrl",
              "description": "A page for configuring accounts, to be displayed in the preferences UI."
            }
          }
        },
        {
          "id": "CloudFile",
          "type": "object",
          "description": "Information about a cloud file",
          "properties": {
            "id": {
              "type": "integer",
              "minimum": 1,
              "description": "An identifier for this file"
            },
            "name": {
              "type": "string",
              "description": "Filename of the file to be transferred"
            },
            "data": {
              "choices": [
                {
                  "type": "object",
                  "isInstanceOf": "ArrayBuffer",
                  "additionalProperties": true,
                  "description": "Contents of the file to be transferred"
                },
                {
                  "type": "object",
                  "isInstanceOf": "File",
                  "additionalProperties": true,
                  "description": "Contents of the file to be transferred"
                }
              ]
            }
          }
        }
      ],
      "functions": [
        {
          "name": "getAccount",
          "type": "function",
          "description": "Retrieve information about a single cloud file account",
          "allowedContexts": [
            "content"
          ],
          "async": "callback",
          "parameters": [
            {
              "name": "accountId",
              "type": "string",
              "description": "Unique identifier of the account"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "CloudFileAccount"
                }
              ]
            }
          ]
        },
        {
          "name": "getAllAccounts",
          "type": "function",
          "description": "Retrieve all cloud file accounts for the current add-on",
          "allowedContexts": [
            "content"
          ],
          "async": "callback",
          "parameters": [
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "CloudFileAccount"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "updateAccount",
          "type": "function",
          "description": "Update a cloud file account",
          "allowedContexts": [
            "content"
          ],
          "async": "callback",
          "parameters": [
            {
              "name": "accountId",
              "type": "string",
              "description": "Unique identifier of the account"
            },
            {
              "name": "updateProperties",
              "type": "object",
              "properties": {
                "configured": {
                  "type": "boolean",
                  "optional": true,
                  "description": "If true, the account is configured and ready to use. Only configured accounts are offered to the user."
                },
                "uploadSizeLimit": {
                  "type": "integer",
                  "minimum": -1,
                  "optional": true,
                  "description": "The maximum size in bytes for a single file to upload. Set to -1 if unlimited."
                },
                "spaceRemaining": {
                  "type": "integer",
                  "minimum": -1,
                  "optional": true,
                  "description": "The amount of remaining space on the cloud provider, in bytes. Set to -1 if unsupported."
                },
                "spaceUsed": {
                  "type": "integer",
                  "minimum": -1,
                  "optional": true,
                  "description": "The amount of space already used on the cloud provider, in bytes. Set to -1 if unsupported."
                },
                "managementUrl": {
                  "type": "string",
                  "format": "relativeUrl",
                  "optional": true,
                  "description": "A page for configuring accounts, to be displayed in the preferences UI."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "CloudFileAccount"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "compose.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "OptionalPermission",
          "choices": [
            {
              "type": "string",
              "enum": [
                "compose",
                "compose.send"
              ]
            }
          ]
        }
      ]
    },
    {
      "namespace": "compose",
      "types": [
        {
          "id": "ComposeRecipient",
          "choices": [
            {
              "type": "string",
              "description": "A name and email address in the format \"Name <email@example.com>\", or just an email address."
            },
            {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The ID of a contact or mailing list from the :doc:`contacts` and :doc:`mailingLists` APIs."
                },
                "type": {
                  "type": "string",
                  "description": "Which sort of object this ID is for.",
                  "enum": [
                    "contact",
                    "mailingList"
                  ]
                }
              }
            }
          ]
        },
        {
          "id": "ComposeRecipientList",
          "choices": [
            {
              "$ref": "ComposeRecipient"
            },
            {
              "type": "array",
              "items": {
                "$ref": "ComposeRecipient"
              }
            }
          ]
        },
        {
          "id": "ComposeState",
          "type": "object",
          "description": "Represent the state of the message composer.",
          "properties": {
            "canSendNow": {
              "type": "boolean",
              "description": "The message can be send now."
            },
            "canSendLater": {
              "type": "boolean",
              "description": "The message can be send later."
            }
          }
        },
        {
          "id": "ComposeDetails",
          "type": "object",
          "description": "Used by various functions to represent the state of a message being composed. Note that functions using this type may have a partial implementation.",
          "properties": {
            "identityId": {
              "type": "string",
              "description": "The ID of an identity from the :doc:`accounts` API. The settings from the identity will be used in the composed message. If ``replyTo`` is also specified, the ``replyTo`` property of the identity is overridden. The permission <permission>accountsRead</permission> is required to include the ``identityId``.",
              "optional": true
            },
            "from": {
              "$ref": "ComposeRecipient",
              "description": "*Caution*: Setting a value for `from` does not change the used identity, it overrides the FROM header. Many email servers do not accept emails where the FROM header does not match the sender identity. Must be set to exactly one valid email address.",
              "optional": true
            },
            "to": {
              "$ref": "ComposeRecipientList",
              "optional": true
            },
            "cc": {
              "$ref": "ComposeRecipientList",
              "optional": true
            },
            "bcc": {
              "$ref": "ComposeRecipientList",
              "optional": true
            },
            "replyTo": {
              "$ref": "ComposeRecipientList",
              "optional": true
            },
            "followupTo": {
              "$ref": "ComposeRecipientList",
              "optional": true
            },
            "newsgroups": {
              "choices": [
                {
                  "type": "string",
                  "description": "A newsgroup name."
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "An array of newsgroup names."
                }
              ],
              "optional": true
            },
            "relatedMessageId": {
              "description": "The id of the original message (in case of draft, template, forward or reply). Read-only. Is <code>null</code> in all other cases or if the original message was opened from file.",
              "type": "integer",
              "optional": true
            },
            "subject": {
              "type": "string",
              "optional": true
            },
            "type": {
              "type": "string",
              "description": "Read-only. The type of the message being composed, depending on how the compose window was opened by the user.",
              "enum": [
                "draft",
                "new",
                "redirect",
                "reply",
                "forward"
              ],
              "optional": true
            },
            "body": {
              "type": "string",
              "optional": true
            },
            "plainTextBody": {
              "type": "string",
              "optional": true
            },
            "isPlainText": {
              "type": "boolean",
              "optional": true
            },
            "attachments": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name, as displayed to the user, of this attachment. If not specified, the name of the ``file`` object is used.",
                    "optional": true
                  },
                  "file": {
                    "type": "object",
                    "isInstanceOf": "File",
                    "additionalProperties": true
                  }
                }
              },
              "description": "Attachments to add to the message. Only used in the begin* functions.",
              "optional": true
            }
          }
        },
        {
          "id": "ComposeAttachment",
          "type": "object",
          "description": "Represents an attachment in a message being composed.",
          "properties": {
            "id": {
              "type": "integer",
              "description": "A unique identifier for this attachment."
            },
            "name": {
              "type": "string",
              "description": "The name, as displayed to the user, of this attachment. This is usually but not always the filename of the attached file."
            },
            "size": {
              "type": "integer",
              "description": "The size in bytes of this attachment."
            }
          },
          "functions": [
            {
              "name": "getFile",
              "type": "function",
              "description": "Retrieves the contents of the attachment as a DOM ``File`` object.",
              "async": true,
              "parameters": []
            }
          ]
        }
      ],
      "events": [
        {
          "name": "onBeforeSend",
          "type": "function",
          "description": "Fired when a message is about to be sent from the compose window. This is a user input event handler. For asynchronous listeners some `restrictions <https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/User_actions>`__ apply.",
          "permissions": [
            "compose"
          ],
          "parameters": [
            {
              "name": "tab",
              "$ref": "tabs.Tab"
            },
            {
              "name": "details",
              "$ref": "ComposeDetails",
              "description": "The current state of the compose window. This is functionally the same as the :ref:`compose.getComposeDetails` function."
            }
          ],
          "returns": {
            "type": "object",
            "properties": {
              "cancel": {
                "type": "boolean",
                "optional": true,
                "description": "Cancels the send."
              },
              "details": {
                "$ref": "ComposeDetails",
                "optional": true,
                "description": "Updates the compose window. See the :ref:`compose.setComposeDetails` function for more information."
              }
            }
          }
        },
        {
          "name": "onAttachmentAdded",
          "type": "function",
          "description": "Fired when an attachment is added to a message being composed.",
          "permissions": [
            "compose"
          ],
          "parameters": [
            {
              "name": "tab",
              "$ref": "tabs.Tab"
            },
            {
              "name": "attachment",
              "$ref": "ComposeAttachment"
            }
          ]
        },
        {
          "name": "onAttachmentRemoved",
          "type": "function",
          "description": "Fired when an attachment is removed from a message being composed.",
          "permissions": [
            "compose"
          ],
          "parameters": [
            {
              "name": "tab",
              "$ref": "tabs.Tab"
            },
            {
              "name": "attachmentId",
              "type": "integer"
            }
          ]
        },
        {
          "name": "onIdentityChanged",
          "type": "function",
          "description": "Fired when the user changes the identity that will be used to send a message being composed.",
          "permissions": [
            "accountsRead"
          ],
          "parameters": [
            {
              "name": "tab",
              "$ref": "tabs.Tab"
            },
            {
              "name": "identityId",
              "type": "string"
            }
          ]
        },
        {
          "name": "onComposeStateChanged",
          "type": "function",
          "description": "Fired when the state of the message composer changed.",
          "parameters": [
            {
              "name": "tab",
              "$ref": "tabs.Tab"
            },
            {
              "name": "state",
              "$ref": "ComposeState"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "beginNew",
          "type": "function",
          "description": "Open a new message compose window. If the provided ComposeDetails object does not provide ``body``, ``plainTextBody`` or ``isPlainText``, the default compose format of the used/default identity is used. The :ref:`accounts_api` API can be used to get the used/default identity and its default compose format.",
          "async": "callback",
          "parameters": [
            {
              "name": "messageId",
              "description": "If specified, the message or template to edit as a new message.",
              "type": "integer",
              "optional": true,
              "minimum": 1
            },
            {
              "name": "details",
              "$ref": "ComposeDetails",
              "optional": true
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "name": "return",
                  "$ref": "tabs.Tab"
                }
              ]
            }
          ]
        },
        {
          "name": "beginReply",
          "type": "function",
          "description": "Open a new message compose window replying to a given message. If the provided ComposeDetails object does not provide ``body``, ``plainTextBody`` or ``isPlainText``, the default compose format of the used/default identity is used. The :ref:`accounts_api` API can be used to get the used/default identity and its default compose format.",
          "async": "callback",
          "parameters": [
            {
              "name": "messageId",
              "description": "The message to reply to, as retrieved using other APIs.",
              "type": "integer",
              "minimum": 1
            },
            {
              "name": "replyType",
              "type": "string",
              "enum": [
                "replyToSender",
                "replyToList",
                "replyToAll"
              ],
              "optional": true
            },
            {
              "name": "details",
              "$ref": "ComposeDetails",
              "optional": true
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "name": "return",
                  "$ref": "tabs.Tab"
                }
              ]
            }
          ]
        },
        {
          "name": "beginForward",
          "type": "function",
          "description": "Open a new message compose window forwarding a given message. If the provided ComposeDetails object does not provide ``body``, ``plainTextBody`` or ``isPlainText``, the default compose format of the used/default identity is used. The :ref:`accounts_api` API can be used to get the used/default identity and its default compose format.",
          "async": "callback",
          "parameters": [
            {
              "name": "messageId",
              "description": "The message to forward, as retrieved using other APIs.",
              "type": "integer",
              "minimum": 1
            },
            {
              "name": "forwardType",
              "type": "string",
              "enum": [
                "forwardInline",
                "forwardAsAttachment"
              ],
              "optional": true
            },
            {
              "name": "details",
              "$ref": "ComposeDetails",
              "optional": true
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "name": "return",
                  "$ref": "tabs.Tab"
                }
              ]
            }
          ]
        },
        {
          "name": "getComposeDetails",
          "type": "function",
          "async": "callback",
          "description": "Fetches the current state of a compose window. Currently only a limited amount of information is available, more will be added in later versions.",
          "permissions": [
            "compose"
          ],
          "parameters": [
            {
              "type": "integer",
              "name": "tabId",
              "minimum": 0
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "ComposeDetails"
                }
              ]
            }
          ]
        },
        {
          "name": "setComposeDetails",
          "type": "function",
          "async": true,
          "description": "Updates the compose window. Specify only fields that you want to change. Currently only the to/cc/bcc/replyTo/followupTo/newsgroups fields and the subject are implemented. It is not possible to change the compose format.",
          "permissions": [
            "compose"
          ],
          "parameters": [
            {
              "type": "integer",
              "name": "tabId",
              "minimum": 0
            },
            {
              "name": "details",
              "$ref": "ComposeDetails",
              "description": "The compose format of an already opened compose window cannot be changed. Setting ``details.body``, ``details.plainTextBody`` or ``details.isPlaintext`` will fail if the compose format of the compose window does not match. Use :ref:`compose.getComposeDetails` to get the current compose format."
            }
          ]
        },
        {
          "name": "listAttachments",
          "type": "function",
          "description": "Lists all of the attachments of the message being composed in the specified tab.",
          "permissions": [
            "compose"
          ],
          "async": "callback",
          "parameters": [
            {
              "name": "tabId",
              "type": "integer"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "choices": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "ComposeAttachment"
                      }
                    },
                    {
                      "type": "any"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "addAttachment",
          "type": "function",
          "description": "Adds an attachment to the message being composed in the specified tab.",
          "permissions": [
            "compose"
          ],
          "async": "callback",
          "parameters": [
            {
              "name": "tabId",
              "type": "integer"
            },
            {
              "name": "data",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name, as displayed to the user, of this attachment. If not specified, the name of the ``file`` object is used.",
                  "optional": true
                },
                "file": {
                  "type": "object",
                  "isInstanceOf": "File",
                  "additionalProperties": true
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "choices": [
                    {
                      "$ref": "ComposeAttachment"
                    },
                    {
                      "type": "any"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "updateAttachment",
          "type": "function",
          "description": "Renames and/or replaces the contents of an attachment to the message being composed in the specified tab.",
          "permissions": [
            "compose"
          ],
          "async": "callback",
          "parameters": [
            {
              "name": "tabId",
              "type": "integer"
            },
            {
              "name": "attachmentId",
              "type": "integer"
            },
            {
              "name": "data",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name, as displayed to the user, of this attachment. If not specified, the name of the ``file`` object is used.",
                  "optional": true
                },
                "file": {
                  "type": "object",
                  "isInstanceOf": "File",
                  "additionalProperties": true,
                  "optional": true
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "choices": [
                    {
                      "$ref": "ComposeAttachment"
                    },
                    {
                      "type": "any"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "removeAttachment",
          "type": "function",
          "description": "Removes an attachment from the message being composed in the specified tab.",
          "permissions": [
            "compose"
          ],
          "async": true,
          "parameters": [
            {
              "name": "tabId",
              "type": "integer"
            },
            {
              "name": "attachmentId",
              "type": "integer"
            }
          ]
        },
        {
          "name": "sendMessage",
          "permissions": [
            "compose.send"
          ],
          "type": "function",
          "description": "Sends the message currently being composed.",
          "async": "callback",
          "parameters": [
            {
              "name": "tabId",
              "type": "integer"
            },
            {
              "name": "options",
              "type": "object",
              "optional": true,
              "properties": {
                "mode": {
                  "type": "string",
                  "enum": [
                    "default",
                    "sendNow",
                    "sendLater"
                  ]
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "description": "Returns false if the current state of the message composer prevented sending the message.",
              "optional": true,
              "parameters": [
                {
                  "name": "return",
                  "type": "boolean"
                }
              ]
            }
          ]
        },
        {
          "name": "getComposeState",
          "type": "function",
          "description": "Returns information about the current state of the message composer.",
          "async": "callback",
          "parameters": [
            {
              "name": "tabId",
              "type": "integer"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "name": "return",
                  "$ref": "ComposeState"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "composeAction.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "WebExtensionManifest",
          "properties": {
            "compose_action": {
              "type": "object",
              "additionalProperties": {
                "$ref": "UnrecognizedProperty"
              },
              "properties": {
                "default_label": {
                  "type": "string",
                  "description": "The label of the composeAction, defaults to its title. Can be set to an empty string to not display any label. If the containing toolbar is configured to display text only, the title will be used as fallback.",
                  "optional": true,
                  "preprocess": "localize"
                },
                "default_title": {
                  "type": "string",
                  "description": "The title of the composeAction. This shows up in the tooltip and the label. Defaults to the add-on name.",
                  "optional": true,
                  "preprocess": "localize"
                },
                "default_icon": {
                  "$ref": "IconPath",
                  "description": "The icon for the messageDisplayAction.",
                  "optional": true
                },
                "theme_icons": {
                  "type": "array",
                  "optional": true,
                  "minItems": 1,
                  "items": {
                    "$ref": "ThemeIcons"
                  },
                  "description": "Specifies icons to use for dark and light themes"
                },
                "default_popup": {
                  "type": "string",
                  "format": "relativeUrl",
                  "optional": true,
                  "description": "The html document to be opened as a popup when the user clicks on the composeAction's icon.",
                  "preprocess": "localize"
                },
                "browser_style": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Enable browser styles. See the `MDN documentation on browser styles <https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/user_interface/Browser_styles>`__ for more information.",
                  "default": false
                },
                "default_area": {
                  "description": "Defines the location the composeAction will appear. The default location is ``maintoolbar``.",
                  "type": "string",
                  "enum": [
                    "maintoolbar",
                    "formattoolbar"
                  ],
                  "optional": true
                }
              },
              "optional": true
            }
          }
        }
      ]
    },
    {
      "namespace": "composeAction",
      "description": "Use a composeAction to put an icon in the message composition toolbars. In addition to its icon, a composeAction can also have a tooltip, a badge, and a popup.",
      "permissions": [
        "manifest:compose_action"
      ],
      "types": [
        {
          "id": "Details",
          "type": "object",
          "description": "Specifies to which tab or window the value should be set, or from which one it should be retrieved. If no tab nor window is specified, the global value is set or retrieved.",
          "properties": {
            "tabId": {
              "type": "integer",
              "optional": true,
              "minimum": 0,
              "description": "When setting a value, it will be specific to the specified tab, and will automatically reset when the tab navigates. When getting, specifies the tab to get the value from; if there is no tab-specific value, the window one will be inherited."
            },
            "windowId": {
              "type": "integer",
              "optional": true,
              "minimum": -2,
              "description": "When setting a value, it will be specific to the specified window. When getting, specifies the window to get the value from; if there is no window-specific value, the global one will be inherited."
            }
          }
        },
        {
          "id": "ColorArray",
          "description": "An array of four integers in the range [0,255] that make up the RGBA color. For example, opaque red is <code>[255, 0, 0, 255]</code>.",
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "minItems": 4,
          "maxItems": 4
        },
        {
          "id": "ImageDataType",
          "type": "object",
          "isInstanceOf": "ImageData",
          "additionalProperties": {
            "type": "any"
          },
          "postprocess": "convertImageDataToURL",
          "description": "Pixel data for an image. Must be an ImageData object (for example, from a <code>canvas</code> element)."
        },
        {
          "id": "ImageDataDictionary",
          "type": "object",
          "description": "A ``{size: ImageDataType}`` dictionary representing the icon to be set. The actual :ref:`composeAction.ImageDataType` to be used is chosen depending on the screen's pixel density. See the `MDN documentation on browser styles <https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/user_interface/Browser_styles>`__ for more information on this. At least one :ref:`composeAction.ImageDataType` must be specified.",
          "patternProperties": {
            "^[1-9]\\d*$": {
              "$ref": "ImageDataType"
            }
          }
        },
        {
          "id": "OnClickData",
          "type": "object",
          "description": "Information sent when a compose action is clicked.",
          "properties": {
            "modifiers": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Shift",
                  "Alt",
                  "Command",
                  "Ctrl",
                  "MacCtrl"
                ]
              },
              "description": "An array of keyboard modifiers that were held while the menu item was clicked."
            },
            "button": {
              "type": "integer",
              "optional": true,
              "description": "An integer value of button by which menu item was clicked."
            }
          }
        }
      ],
      "functions": [
        {
          "name": "setTitle",
          "type": "function",
          "description": "Sets the title of the composeAction. This shows up in the tooltip and the label. Defaults to the add-on name.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "type": "object",
              "$import": "Details",
              "properties": {
                "title": {
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "The string the composeAction should display as its label and when moused over."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "getTitle",
          "type": "function",
          "description": "Gets the title of the composeAction.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "$ref": "Details"
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "result",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "name": "setLabel",
          "type": "function",
          "description": "Sets the label of the composeAction, defaults to its title. Can be set to an empty string to not display any label. If the containing toolbar is configured to display text only, the title will be used as fallback.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "type": "object",
              "$import": "Details",
              "properties": {
                "label": {
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "The string the composeAction should use as label. Can be set to an empty string to not display any label. If the containing toolbar is configured to display text only, the title will be used as fallback."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "getLabel",
          "type": "function",
          "description": "Gets the label of the composeAction.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "$ref": "Details"
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "result",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "name": "setIcon",
          "type": "function",
          "description": "Sets the icon for the composeAction. The icon can be specified either as the path to an image file or as the pixel data from a canvas element, or as dictionary of either one of those. Either the <b>path</b> or the <b>imageData</b> property must be specified.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "type": "object",
              "$import": "Details",
              "properties": {
                "imageData": {
                  "choices": [
                    {
                      "$ref": "ImageDataType"
                    },
                    {
                      "$ref": "ImageDataDictionary"
                    }
                  ],
                  "optional": true,
                  "description": "Either an ImageDataType object defining a single icon used for all sizes or an ImageDataDictionary object defining dedicated icons for different sizes."
                },
                "path": {
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "manifest.IconPath"
                    }
                  ],
                  "optional": true,
                  "description": "Either a relative image path defining a single icon used for all sizes or an IconPathDictionary object defining dedicated icons for different sizes."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "setPopup",
          "type": "function",
          "description": "Sets the html document to be opened as a popup when the user clicks on the composeAction's icon.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "type": "object",
              "$import": "Details",
              "properties": {
                "popup": {
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "The html file to show in a popup.  If set to the empty string (''), no popup is shown."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "getPopup",
          "type": "function",
          "description": "Gets the html document set as the popup for this composeAction.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "$ref": "Details"
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "result",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "name": "setBadgeText",
          "type": "function",
          "description": "Sets the badge text for the composeAction. The badge is displayed on top of the icon.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "type": "object",
              "$import": "Details",
              "properties": {
                "text": {
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "Any number of characters can be passed, but only about four can fit in the space."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "getBadgeText",
          "type": "function",
          "description": "Gets the badge text of the composeAction. If no tab nor window is specified, the global badge text is returned.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "$ref": "Details"
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "result",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "name": "setBadgeBackgroundColor",
          "type": "function",
          "description": "Sets the background color for the badge.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "type": "object",
              "$import": "Details",
              "properties": {
                "color": {
                  "description": "An array of four integers in the range [0,255] that make up the RGBA color of the badge. For example, opaque red is <code>[255, 0, 0, 255]</code>. Can also be a string with a CSS value, with opaque red being <code>#FF0000</code> or <code>#F00</code>.",
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "ColorArray"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "getBadgeBackgroundColor",
          "type": "function",
          "description": "Gets the background color of the composeAction.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "$ref": "Details"
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "result",
                  "$ref": "ColorArray"
                }
              ]
            }
          ]
        },
        {
          "name": "enable",
          "type": "function",
          "description": "Enables the composeAction for a tab. By default, a composeAction is enabled.",
          "async": "callback",
          "parameters": [
            {
              "type": "integer",
              "optional": true,
              "name": "tabId",
              "minimum": 0,
              "description": "The id of the tab for which you want to modify the composeAction."
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "disable",
          "type": "function",
          "description": "Disables the composeAction for a tab.",
          "async": "callback",
          "parameters": [
            {
              "type": "integer",
              "optional": true,
              "name": "tabId",
              "minimum": 0,
              "description": "The id of the tab for which you want to modify the composeAction."
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "isEnabled",
          "type": "function",
          "description": "Checks whether the composeAction is enabled.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "$ref": "Details"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "boolean"
                }
              ]
            }
          ]
        },
        {
          "name": "openPopup",
          "type": "function",
          "requireUserInput": true,
          "description": "Opens the extension popup window in the active window.",
          "async": true,
          "parameters": []
        }
      ],
      "events": [
        {
          "name": "onClicked",
          "type": "function",
          "description": "Fired when a composeAction icon is clicked.  This event will not fire if the composeAction has a popup. This is a user input event handler. For asynchronous listeners some `restrictions <https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/User_actions>`__ apply.",
          "parameters": [
            {
              "name": "tab",
              "$ref": "tabs.Tab"
            },
            {
              "name": "info",
              "$ref": "OnClickData",
              "optional": true
            }
          ]
        }
      ]
    }
  ],
  "extensionScripts.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "OptionalPermission",
          "choices": [
            {
              "type": "string",
              "enum": [
                "messagesModify"
              ]
            }
          ]
        }
      ]
    },
    {
      "namespace": "composeScripts",
      "permissions": [
        "compose"
      ],
      "types": [
        {
          "id": "RegisteredComposeScriptOptions",
          "type": "object",
          "description": "Details of a compose script registered programmatically",
          "properties": {
            "css": {
              "type": "array",
              "optional": true,
              "description": "The list of CSS files to inject",
              "items": {
                "$ref": "extensionTypes.ExtensionFileOrCode"
              }
            },
            "js": {
              "type": "array",
              "optional": true,
              "description": "The list of JavaScript files to inject",
              "items": {
                "$ref": "extensionTypes.ExtensionFileOrCode"
              }
            }
          }
        },
        {
          "id": "RegisteredComposeScript",
          "type": "object",
          "description": "An object that represents a compose script registered programmatically",
          "functions": [
            {
              "name": "unregister",
              "type": "function",
              "description": "Unregister a compose script registered programmatically",
              "async": true,
              "parameters": []
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "register",
          "type": "function",
          "description": "Register a compose script programmatically",
          "async": true,
          "parameters": [
            {
              "name": "composeScriptOptions",
              "$ref": "RegisteredComposeScriptOptions"
            }
          ]
        }
      ]
    },
    {
      "namespace": "messageDisplayScripts",
      "permissions": [
        "messagesModify"
      ],
      "types": [
        {
          "id": "RegisteredMessageDisplayScriptOptions",
          "type": "object",
          "description": "Details of a message display script registered programmatically",
          "properties": {
            "css": {
              "type": "array",
              "optional": true,
              "description": "The list of CSS files to inject",
              "items": {
                "$ref": "extensionTypes.ExtensionFileOrCode"
              }
            },
            "js": {
              "type": "array",
              "optional": true,
              "description": "The list of JavaScript files to inject",
              "items": {
                "$ref": "extensionTypes.ExtensionFileOrCode"
              }
            }
          }
        },
        {
          "id": "RegisteredMessageDisplayScript",
          "type": "object",
          "description": "An object that represents a message display script registered programmatically",
          "functions": [
            {
              "name": "unregister",
              "type": "function",
              "description": "Unregister a message display script registered programmatically",
              "async": true,
              "parameters": []
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "register",
          "type": "function",
          "description": "Register a message display script programmatically",
          "async": true,
          "parameters": [
            {
              "name": "messageDisplayScriptOptions",
              "$ref": "RegisteredMessageDisplayScriptOptions"
            }
          ]
        }
      ]
    }
  ],
  "folders.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "OptionalPermission",
          "choices": [
            {
              "type": "string",
              "enum": [
                "accountsFolders"
              ]
            }
          ]
        }
      ]
    },
    {
      "namespace": "folders",
      "permissions": [
        "accountsRead"
      ],
      "types": [
        {
          "id": "MailFolder",
          "type": "object",
          "description": "An object describing a mail folder, as returned for example by the :ref:`folders.getParentFolders` or :ref:`folders.getSubFolders` methods, or part of a :ref:`accounts.MailAccount` object, which is returned for example by the :ref:`accounts.list` and :ref:`accounts.get` methods. The ``subFolders`` property is only included if requested.",
          "properties": {
            "accountId": {
              "type": "string",
              "description": "The account this folder belongs to."
            },
            "name": {
              "type": "string",
              "optional": true,
              "description": "The human-friendly name of this folder."
            },
            "path": {
              "type": "string",
              "description": "Path to this folder in the account. Although paths look predictable, never guess a folder's path, as there are a number of reasons why it may not be what you think it is. Use :ref:`folders.getParentFolders` or :ref:`folders.getSubFolders` to obtain hierarchy information."
            },
            "subFolders": {
              "type": "array",
              "description": "Subfolders are only included if requested.",
              "items": {
                "$ref": "MailFolder"
              },
              "optional": true
            },
            "type": {
              "type": "string",
              "optional": true,
              "description": "The type of folder, for several common types.",
              "enum": [
                "inbox",
                "drafts",
                "sent",
                "trash",
                "templates",
                "archives",
                "junk",
                "outbox"
              ]
            }
          }
        },
        {
          "id": "MailFolderInfo",
          "type": "object",
          "description": "An object containing additional information about a mail folder.",
          "properties": {
            "favorite": {
              "type": "boolean",
              "optional": true,
              "description": "Whether this folder is a favorite folder."
            },
            "totalMessageCount": {
              "type": "integer",
              "optional": true,
              "description": "Number of messages in this folder."
            },
            "unreadMessageCount": {
              "type": "integer",
              "optional": true,
              "description": "Number of unread messages in this folder."
            }
          }
        }
      ],
      "functions": [
        {
          "name": "create",
          "type": "function",
          "permissions": [
            "accountsFolders"
          ],
          "description": "Creates a new subfolder in the specified folder or at the root of the specified account.",
          "async": "callback",
          "parameters": [
            {
              "name": "parent",
              "choices": [
                {
                  "$ref": "folders.MailFolder"
                },
                {
                  "$ref": "accounts.MailAccount"
                }
              ]
            },
            {
              "name": "childName",
              "type": "string"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "folders.MailFolder"
                }
              ]
            }
          ]
        },
        {
          "name": "rename",
          "type": "function",
          "permissions": [
            "accountsFolders"
          ],
          "description": "Renames a folder.",
          "async": "callback",
          "parameters": [
            {
              "name": "folder",
              "$ref": "folders.MailFolder"
            },
            {
              "name": "newName",
              "type": "string"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "folders.MailFolder"
                }
              ]
            }
          ]
        },
        {
          "name": "move",
          "type": "function",
          "permissions": [
            "accountsFolders"
          ],
          "description": "Moves the given ``sourceFolder`` into the given ``destination``. Throws if the destination already contains a folder with the name of the source folder.",
          "async": "callback",
          "parameters": [
            {
              "name": "sourceFolder",
              "$ref": "folders.MailFolder"
            },
            {
              "name": "destination",
              "choices": [
                {
                  "$ref": "folders.MailFolder"
                },
                {
                  "$ref": "accounts.MailAccount"
                }
              ]
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "folders.MailFolder"
                }
              ]
            }
          ]
        },
        {
          "name": "copy",
          "type": "function",
          "permissions": [
            "accountsFolders"
          ],
          "description": "Copies the given ``sourceFolder`` into the given ``destination``.  Throws if the destination already contains a folder with the name of the source folder.",
          "async": "callback",
          "parameters": [
            {
              "name": "sourceFolder",
              "$ref": "folders.MailFolder"
            },
            {
              "name": "destination",
              "choices": [
                {
                  "$ref": "folders.MailFolder"
                },
                {
                  "$ref": "accounts.MailAccount"
                }
              ]
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "folders.MailFolder"
                }
              ]
            }
          ]
        },
        {
          "name": "delete",
          "permissions": [
            "accountsFolders",
            "messagesDelete"
          ],
          "type": "function",
          "description": "Deletes a folder.",
          "async": true,
          "parameters": [
            {
              "name": "folder",
              "$ref": "folders.MailFolder"
            }
          ]
        },
        {
          "name": "getFolderInfo",
          "type": "function",
          "description": "Get additional information about a mail folder.",
          "async": "callback",
          "parameters": [
            {
              "name": "folder",
              "$ref": "folders.MailFolder"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "folders.MailFolderInfo"
                }
              ]
            }
          ]
        },
        {
          "name": "getParentFolders",
          "type": "function",
          "description": "Get all parent folders as a flat ordered array. The first array entry is the direct parent.",
          "async": "callback",
          "parameters": [
            {
              "name": "folder",
              "$ref": "folders.MailFolder"
            },
            {
              "name": "includeSubFolders",
              "description": "Specifies whether the returned :ref:`folders.MailFolder` object for each parent folder should include its nested subfolders . Defaults to ``false``.",
              "optional": true,
              "default": false,
              "type": "boolean"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "folders.MailFolder"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "getSubFolders",
          "type": "function",
          "description": "Get the subfolders of the specified folder or account.",
          "async": "callback",
          "parameters": [
            {
              "name": "folderOrAccount",
              "choices": [
                {
                  "$ref": "folders.MailFolder"
                },
                {
                  "$ref": "accounts.MailAccount"
                }
              ]
            },
            {
              "name": "includeSubFolders",
              "description": "Specifies whether the returned :ref:`folders.MailFolder` object for each direct subfolder should also include all its nested subfolders . Defaults to ``true``.",
              "optional": true,
              "default": true,
              "type": "boolean"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "folders.MailFolder"
                  }
                }
              ]
            }
          ]
        }
      ],
      "events": [
        {
          "name": "onCreated",
          "type": "function",
          "description": "Fired when a folder has been created.",
          "parameters": [
            {
              "name": "createdFolder",
              "$ref": "folders.MailFolder"
            }
          ]
        },
        {
          "name": "onRenamed",
          "type": "function",
          "description": "Fired when a folder has been renamed.",
          "parameters": [
            {
              "name": "originalFolder",
              "$ref": "folders.MailFolder"
            },
            {
              "name": "renamedFolder",
              "$ref": "folders.MailFolder"
            }
          ]
        },
        {
          "name": "onMoved",
          "type": "function",
          "description": "Fired when a folder has been moved.",
          "parameters": [
            {
              "name": "originalFolder",
              "$ref": "folders.MailFolder"
            },
            {
              "name": "movedFolder",
              "$ref": "folders.MailFolder"
            }
          ]
        },
        {
          "name": "onCopied",
          "type": "function",
          "description": "Fired when a folder has been copied.",
          "parameters": [
            {
              "name": "originalFolder",
              "$ref": "folders.MailFolder"
            },
            {
              "name": "copiedFolder",
              "$ref": "folders.MailFolder"
            }
          ]
        },
        {
          "name": "onDeleted",
          "type": "function",
          "description": "Fired when a folder has been deleted.",
          "parameters": [
            {
              "name": "deletedFolder",
              "$ref": "folders.MailFolder"
            }
          ]
        },
        {
          "name": "onFolderInfoChanged",
          "type": "function",
          "description": "Fired when certain information of a folder have changed. Bursts of message count changes are collapsed to a single event.",
          "parameters": [
            {
              "name": "folder",
              "$ref": "folders.MailFolder"
            },
            {
              "name": "folderInfo",
              "$ref": "folders.MailFolderInfo"
            }
          ]
        }
      ]
    }
  ],
  "identities.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "OptionalPermission",
          "choices": [
            {
              "type": "string",
              "enum": [
                "accountsIdentities"
              ]
            }
          ]
        }
      ]
    },
    {
      "namespace": "identities",
      "permissions": [
        "accountsRead"
      ],
      "types": [
        {
          "id": "MailIdentity",
          "type": "object",
          "properties": {
            "accountId": {
              "type": "string",
              "optional": true,
              "description": "The id of the :ref:`accounts.MailAccount` this identity belongs to. The ``accountId`` property is read-only."
            },
            "composeHtml": {
              "type": "boolean",
              "optional": true,
              "description": "If the identity uses HTML as the default compose format."
            },
            "email": {
              "type": "string",
              "optional": true,
              "description": "The user's email address as used when messages are sent from this identity."
            },
            "id": {
              "type": "string",
              "optional": true,
              "description": "A unique identifier for this identity. The ``id`` property is read-only."
            },
            "label": {
              "type": "string",
              "optional": true,
              "description": "A user-defined label for this identity."
            },
            "name": {
              "type": "string",
              "optional": true,
              "description": "The user's name as used when messages are sent from this identity."
            },
            "replyTo": {
              "type": "string",
              "optional": true,
              "description": "The reply-to email address associated with this identity."
            },
            "organization": {
              "type": "string",
              "optional": true,
              "description": "The organization associated with this identity."
            },
            "signature": {
              "type": "string",
              "optional": true,
              "description": "The signature of the identity."
            },
            "signatureIsPlainText": {
              "type": "boolean",
              "optional": true,
              "description": "If the signature should be interpreted as plain text or as HTML."
            }
          }
        }
      ],
      "functions": [
        {
          "name": "list",
          "type": "function",
          "description": "Returns the identities of the specified account, or all identities if no account is specified. Do not expect the returned identities to be in any specific order. Use :ref:`identities.getDefault` to get the default identity of an account.",
          "async": "callback",
          "parameters": [
            {
              "name": "accountId",
              "type": "string",
              "optional": true
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "identities.MailIdentity"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "description": "Returns details of the requested identity, or null if it doesn't exist.",
          "async": "callback",
          "parameters": [
            {
              "name": "identityId",
              "type": "string"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "identities.MailIdentity",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "name": "create",
          "permissions": [
            "accountsIdentities"
          ],
          "type": "function",
          "description": "Create a new identity in the specified account.",
          "async": "callback",
          "parameters": [
            {
              "name": "accountId",
              "type": "string"
            },
            {
              "name": "details",
              "$ref": "identities.MailIdentity"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "identities.MailIdentity"
                }
              ]
            }
          ]
        },
        {
          "name": "delete",
          "permissions": [
            "accountsIdentities"
          ],
          "type": "function",
          "description": "Attempts to delete the requested identity. Default identities cannot be deleted.",
          "async": true,
          "parameters": [
            {
              "name": "identityId",
              "type": "string"
            }
          ]
        },
        {
          "name": "update",
          "permissions": [
            "accountsIdentities"
          ],
          "type": "function",
          "description": "Updates the details of an identity.",
          "async": "callback",
          "parameters": [
            {
              "name": "identityId",
              "type": "string"
            },
            {
              "name": "details",
              "$ref": "identities.MailIdentity"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "identities.MailIdentity"
                }
              ]
            }
          ]
        },
        {
          "name": "getDefault",
          "type": "function",
          "description": "Returns the default identity for the requested account, or null if it is not defined.",
          "async": "callback",
          "parameters": [
            {
              "name": "accountId",
              "type": "string"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "identities.MailIdentity"
                }
              ]
            }
          ]
        },
        {
          "name": "setDefault",
          "type": "function",
          "description": "Sets the default identity for the requested account.",
          "async": true,
          "parameters": [
            {
              "name": "accountId",
              "type": "string"
            },
            {
              "name": "identityId",
              "type": "string"
            }
          ]
        }
      ],
      "events": [
        {
          "name": "onCreated",
          "type": "function",
          "description": "Fired when a new identity has been created and added to an account. The event also fires for default identities that are created when a new account is added.",
          "parameters": [
            {
              "name": "identityId",
              "type": "string"
            },
            {
              "name": "identity",
              "$ref": "MailIdentity"
            }
          ]
        },
        {
          "name": "onDeleted",
          "type": "function",
          "description": "Fired when an identity has been removed from an account.",
          "parameters": [
            {
              "name": "identityId",
              "type": "string"
            }
          ]
        },
        {
          "name": "onUpdated",
          "type": "function",
          "description": "Fired when one or more properties of an identity have been modified. The returned :ref:`identities.MailIdentity` includes only the changed values.",
          "parameters": [
            {
              "name": "identityId",
              "type": "string"
            },
            {
              "name": "changedValues",
              "$ref": "MailIdentity"
            }
          ]
        }
      ]
    }
  ],
  "mailTabs.json": [
    {
      "namespace": "mailTabs",
      "types": [
        {
          "id": "MailTab",
          "type": "object",
          "properties": {
            "id": {
              "type": "integer"
            },
            "windowId": {
              "type": "integer"
            },
            "active": {
              "type": "boolean"
            },
            "sortType": {
              "type": "string",
              "description": "Note: ``sortType`` and ``sortOrder`` depend on each other, so both should be present, or neither.",
              "optional": true,
              "enum": [
                "none",
                "date",
                "subject",
                "author",
                "id",
                "thread",
                "priority",
                "status",
                "size",
                "flagged",
                "unread",
                "recipient",
                "location",
                "tags",
                "junkStatus",
                "attachments",
                "account",
                "custom",
                "received",
                "correspondent"
              ]
            },
            "sortOrder": {
              "type": "string",
              "description": "Note: ``sortType`` and ``sortOrder`` depend on each other, so both should be present, or neither.",
              "optional": true,
              "enum": [
                "none",
                "ascending",
                "descending"
              ]
            },
            "viewType": {
              "type": "string",
              "optional": true,
              "enum": [
                "ungrouped",
                "groupedByThread",
                "groupedBySortType"
              ]
            },
            "layout": {
              "type": "string",
              "enum": [
                "standard",
                "wide",
                "vertical"
              ]
            },
            "folderPaneVisible": {
              "type": "boolean",
              "optional": true
            },
            "messagePaneVisible": {
              "type": "boolean",
              "optional": true
            },
            "displayedFolder": {
              "$ref": "folders.MailFolder",
              "optional": true,
              "description": "The <permission>accountsRead</permission> permission is required for this property to be included."
            }
          }
        },
        {
          "id": "QuickFilterTextDetail",
          "type": "object",
          "properties": {
            "text": {
              "type": "string",
              "description": "String to match against the <var>recipients</var>, <var>author</var>, <var>subject</var>, or <var>body</var>."
            },
            "recipients": {
              "type": "boolean",
              "description": "Shows messages where <var>text</var> matches the recipients.",
              "optional": true
            },
            "author": {
              "type": "boolean",
              "description": "Shows messages where <var>text</var> matches the author.",
              "optional": true
            },
            "subject": {
              "type": "boolean",
              "description": "Shows messages where <var>text</var> matches the subject.",
              "optional": true
            },
            "body": {
              "type": "boolean",
              "description": "Shows messages where <var>text</var> matches the message body.",
              "optional": true
            }
          }
        }
      ],
      "functions": [
        {
          "name": "query",
          "type": "function",
          "description": "Gets all mail tabs that have the specified properties, or all mail tabs if no properties are specified.",
          "async": "callback",
          "parameters": [
            {
              "type": "object",
              "name": "queryInfo",
              "properties": {
                "active": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether the tabs are active in their windows."
                },
                "currentWindow": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether the tabs are in the current window."
                },
                "lastFocusedWindow": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether the tabs are in the last focused window."
                },
                "windowId": {
                  "type": "integer",
                  "optional": true,
                  "minimum": -2,
                  "description": "The ID of the parent window, or :ref:`windows.WINDOW_ID_CURRENT` for the current window."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "MailTab"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "description": "Get the properties of a mail tab.",
          "async": "callback",
          "parameters": [
            {
              "name": "tabId",
              "type": "integer",
              "description": "ID of the requested mail tab. Throws if the requested tab is not a mail tab."
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "MailTab"
                }
              ]
            }
          ]
        },
        {
          "name": "getCurrent",
          "type": "function",
          "description": "Get the properties of the active mail tab, if the active tab is a mail tab. Returns undefined otherwise.",
          "async": "callback",
          "parameters": [
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "MailTab",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "name": "update",
          "type": "function",
          "description": "Modifies the properties of a mail tab. Properties that are not specified in <var>updateProperties</var> are not modified.",
          "async": true,
          "parameters": [
            {
              "name": "tabId",
              "type": "integer",
              "description": "Defaults to the active tab of the current window.",
              "optional": true,
              "minimum": 1
            },
            {
              "name": "updateProperties",
              "type": "object",
              "properties": {
                "displayedFolder": {
                  "$ref": "folders.MailFolder",
                  "description": "Sets the folder displayed in the tab. The extension must have the <permission>accountsRead</permission> permission to do this.",
                  "optional": true
                },
                "sortType": {
                  "type": "string",
                  "description": "Sorts the list of messages. <var>sortOrder</var> must also be given.",
                  "optional": true,
                  "enum": [
                    "none",
                    "date",
                    "subject",
                    "author",
                    "id",
                    "thread",
                    "priority",
                    "status",
                    "size",
                    "flagged",
                    "unread",
                    "recipient",
                    "location",
                    "tags",
                    "junkStatus",
                    "attachments",
                    "account",
                    "custom",
                    "received",
                    "correspondent"
                  ]
                },
                "sortOrder": {
                  "type": "string",
                  "description": "Sorts the list of messages. <var>sortType</var> must also be given.",
                  "optional": true,
                  "enum": [
                    "none",
                    "ascending",
                    "descending"
                  ]
                },
                "viewType": {
                  "type": "string",
                  "optional": true,
                  "enum": [
                    "ungrouped",
                    "groupedByThread",
                    "groupedBySortType"
                  ]
                },
                "layout": {
                  "type": "string",
                  "description": "Sets the arrangement of the folder pane, message list pane, and message display pane. Note that setting this applies it to all mail tabs.",
                  "optional": true,
                  "enum": [
                    "standard",
                    "wide",
                    "vertical"
                  ]
                },
                "folderPaneVisible": {
                  "type": "boolean",
                  "description": "Shows or hides the folder pane.",
                  "optional": true
                },
                "messagePaneVisible": {
                  "type": "boolean",
                  "description": "Shows or hides the message display pane.",
                  "optional": true
                }
              }
            }
          ]
        },
        {
          "name": "getSelectedMessages",
          "type": "function",
          "description": "Lists the selected messages in the current folder.",
          "permissions": [
            "messagesRead"
          ],
          "async": "callback",
          "parameters": [
            {
              "name": "tabId",
              "type": "integer",
              "description": "Defaults to the active tab of the current window.",
              "optional": true,
              "minimum": 1
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "messages.MessageList"
                }
              ]
            }
          ]
        },
        {
          "name": "setQuickFilter",
          "type": "function",
          "description": "Sets the Quick Filter user interface based on the options specified.",
          "async": true,
          "parameters": [
            {
              "name": "tabId",
              "type": "integer",
              "description": "Defaults to the active tab of the current window.",
              "optional": true,
              "minimum": 1
            },
            {
              "name": "properties",
              "type": "object",
              "properties": {
                "show": {
                  "type": "boolean",
                  "description": "Shows or hides the Quick Filter bar.",
                  "optional": true
                },
                "unread": {
                  "type": "boolean",
                  "description": "Shows only unread messages.",
                  "optional": true
                },
                "flagged": {
                  "type": "boolean",
                  "description": "Shows only flagged messages.",
                  "optional": true
                },
                "contact": {
                  "type": "boolean",
                  "description": "Shows only messages from people in the address book.",
                  "optional": true
                },
                "tags": {
                  "optional": true,
                  "choices": [
                    {
                      "type": "boolean"
                    },
                    {
                      "$ref": "messages.TagsDetail"
                    }
                  ],
                  "description": "Shows only messages with tags on them."
                },
                "attachment": {
                  "type": "boolean",
                  "description": "Shows only messages with attachments.",
                  "optional": true
                },
                "text": {
                  "$ref": "QuickFilterTextDetail",
                  "description": "Shows only messages matching the supplied text.",
                  "optional": true
                }
              }
            }
          ]
        }
      ],
      "events": [
        {
          "name": "onDisplayedFolderChanged",
          "type": "function",
          "description": "Fired when the displayed folder changes in any mail tab.",
          "permissions": [
            "accountsRead"
          ],
          "parameters": [
            {
              "name": "tab",
              "$ref": "tabs.Tab"
            },
            {
              "name": "displayedFolder",
              "$ref": "folders.MailFolder"
            }
          ]
        },
        {
          "name": "onSelectedMessagesChanged",
          "type": "function",
          "description": "Fired when the selected messages change in any mail tab.",
          "permissions": [
            "messagesRead"
          ],
          "parameters": [
            {
              "name": "tab",
              "$ref": "tabs.Tab"
            },
            {
              "name": "selectedMessages",
              "$ref": "messages.MessageList"
            }
          ]
        }
      ]
    }
  ],
  "menus.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "PermissionNoPrompt",
          "choices": [
            {
              "type": "string",
              "enum": [
                "menus"
              ]
            }
          ]
        },
        {
          "$extend": "OptionalPermissionNoPrompt",
          "choices": [
            {
              "type": "string",
              "enum": [
                "menus.overrideContext"
              ]
            }
          ]
        }
      ]
    },
    {
      "namespace": "menus",
      "permissions": [
        "menus"
      ],
      "description": "Use the browser.menus API to add items to the browser's menus. You can choose what types of objects your context menu additions apply to, such as images, hyperlinks, and pages.",
      "properties": {
        "ACTION_MENU_TOP_LEVEL_LIMIT": {
          "value": 6,
          "description": "The maximum number of top level extension items that can be added to an extension action context menu. Any items beyond this limit will be ignored."
        }
      },
      "types": [
        {
          "id": "ContextType",
          "type": "string",
          "enum": [
            "all",
            "page",
            "frame",
            "selection",
            "link",
            "editable",
            "password",
            "image",
            "video",
            "audio",
            "browser_action",
            "compose_action",
            "message_display_action",
            "tab",
            "message_list",
            "folder_pane",
            "compose_attachments",
            "tools_menu"
          ],
          "description": "The different contexts a menu can appear in. Specifying <code>all</code> is equivalent to the combination of all other contexts excluding <code>tab</code> and <code>tools_menu</code>. More information about each context can be found in the `Supported UI Elements <https://developer.thunderbird.net/add-ons/mailextensions/supported-ui-elements#menu-items>`__ article on developer.thunderbird.net."
        },
        {
          "id": "ItemType",
          "type": "string",
          "enum": [
            "normal",
            "checkbox",
            "radio",
            "separator"
          ],
          "description": "The type of menu item."
        },
        {
          "id": "OnShowData",
          "type": "object",
          "description": "Information sent when a context menu is being shown. For more information about each property, see :ref:`menus.OnClickData`. \nSome properties are only included if the extension has host permission for the given context, for example :permission:`activeTab` for content tabs, :permission:`compose` for compose tabs and :permission:`messagesRead` for message display tabs.",
          "properties": {
            "menuIds": {
              "description": "A list of IDs of the menu items that were shown.",
              "type": "array",
              "items": {
                "choices": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            },
            "contexts": {
              "description": "A list of all contexts that apply to the menu.",
              "type": "array",
              "items": {
                "$ref": "ContextType"
              }
            },
            "viewType": {
              "$ref": "extension.ViewType",
              "optional": true
            },
            "editable": {
              "type": "boolean"
            },
            "mediaType": {
              "type": "string",
              "optional": true
            },
            "linkUrl": {
              "type": "string",
              "description": "Host permission is required.",
              "optional": true
            },
            "linkText": {
              "type": "string",
              "description": "Host permission is required.",
              "optional": true
            },
            "srcUrl": {
              "type": "string",
              "description": "Host permission is required.",
              "optional": true
            },
            "pageUrl": {
              "type": "string",
              "description": "Host permission is required.",
              "optional": true
            },
            "frameUrl": {
              "type": "string",
              "description": "Host permission is required.",
              "optional": true
            },
            "selectionText": {
              "type": "string",
              "description": "Host permission is required.",
              "optional": true
            },
            "targetElementId": {
              "type": "integer",
              "optional": true
            },
            "fieldId": {
              "type": "string",
              "optional": true
            },
            "selectedMessages": {
              "$ref": "messages.MessageList",
              "optional": true
            },
            "displayedFolder": {
              "$ref": "folders.MailFolder",
              "optional": true
            },
            "selectedFolder": {
              "$ref": "folders.MailFolder",
              "optional": true
            },
            "selectedAccount": {
              "$ref": "accounts.MailAccount",
              "optional": true
            },
            "attachments": {
              "type": "array",
              "optional": true,
              "items": {
                "$ref": "compose.ComposeAttachment"
              }
            }
          }
        },
        {
          "id": "OnClickData",
          "type": "object",
          "description": "Information sent when a context menu item is clicked.",
          "properties": {
            "menuItemId": {
              "choices": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "description": "The ID of the menu item that was clicked."
            },
            "parentMenuItemId": {
              "choices": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "optional": true,
              "description": "The parent ID, if any, for the item clicked."
            },
            "viewType": {
              "$ref": "extension.ViewType",
              "optional": true,
              "description": "The type of view where the menu is clicked. May be unset if the menu is not associated with a view."
            },
            "mediaType": {
              "type": "string",
              "optional": true,
              "description": "One of 'image', 'video', or 'audio' if the context menu was activated on one of these types of elements."
            },
            "linkText": {
              "type": "string",
              "optional": true,
              "description": "If the element is a link, the text of that link."
            },
            "linkUrl": {
              "type": "string",
              "optional": true,
              "description": "If the element is a link, the URL it points to."
            },
            "srcUrl": {
              "type": "string",
              "optional": true,
              "description": "Will be present for elements with a 'src' URL."
            },
            "pageUrl": {
              "type": "string",
              "optional": true,
              "description": "The URL of the page where the menu item was clicked. This property is not set if the click occurred in a context where there is no current page, such as in a launcher context menu."
            },
            "frameId": {
              "type": "integer",
              "optional": true,
              "minimum": 0,
              "description": "The id of the frame of the element where the context menu was clicked."
            },
            "frameUrl": {
              "type": "string",
              "optional": true,
              "description": "The URL of the frame of the element where the context menu was clicked, if it was in a frame."
            },
            "selectionText": {
              "type": "string",
              "optional": true,
              "description": "The text for the context selection, if any."
            },
            "editable": {
              "type": "boolean",
              "description": "A flag indicating whether the element is editable (text input, textarea, etc.)."
            },
            "wasChecked": {
              "type": "boolean",
              "optional": true,
              "description": "A flag indicating the state of a checkbox or radio item before it was clicked."
            },
            "checked": {
              "type": "boolean",
              "optional": true,
              "description": "A flag indicating the state of a checkbox or radio item after it is clicked."
            },
            "modifiers": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Shift",
                  "Alt",
                  "Command",
                  "Ctrl",
                  "MacCtrl"
                ]
              },
              "description": "An array of keyboard modifiers that were held while the menu item was clicked."
            },
            "button": {
              "type": "integer",
              "optional": true,
              "description": "An integer value of button by which menu item was clicked."
            },
            "targetElementId": {
              "type": "integer",
              "optional": true,
              "description": "An identifier of the clicked content element, if any. Use menus.getTargetElement in the page to find the corresponding element."
            },
            "fieldId": {
              "type": "string",
              "optional": true,
              "description": "An identifier of the clicked Thunderbird UI element, if any.",
              "enum": [
                "composeSubject",
                "composeTo",
                "composeCc",
                "composeBcc",
                "composeReplyTo",
                "composeNewsgroupTo"
              ]
            },
            "selectedMessages": {
              "$ref": "messages.MessageList",
              "optional": true,
              "description": "The selected messages, if the context menu was opened in the message list. The <permission>messagesRead</permission> permission is required."
            },
            "displayedFolder": {
              "$ref": "folders.MailFolder",
              "optional": true,
              "description": "The displayed folder, if the context menu was opened in the message list. The <permission>accountsRead</permission> permission is required."
            },
            "selectedFolder": {
              "$ref": "folders.MailFolder",
              "optional": true,
              "description": "The selected folder, if the context menu was opened in the folder pane. The <permission>accountsRead</permission> permission is required."
            },
            "selectedAccount": {
              "$ref": "accounts.MailAccount",
              "optional": true,
              "description": "The selected account, if the context menu was opened on an account entry in the folder pane. The <permission>accountsRead</permission> permission is required."
            },
            "attachments": {
              "type": "array",
              "optional": true,
              "description": "The selected attachments of a message being composed. The <permission>compose</permission> permission is required.",
              "items": {
                "$ref": "compose.ComposeAttachment"
              }
            }
          }
        }
      ],
      "functions": [
        {
          "name": "create",
          "type": "function",
          "description": "Creates a new context menu item. Note that if an error occurs during creation, you may not find out until the creation callback fires (the details will be in `runtime.lastError <https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/lastError>`_).",
          "returns": {
            "choices": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "description": "The ID of the newly created item."
          },
          "parameters": [
            {
              "type": "object",
              "name": "createProperties",
              "properties": {
                "type": {
                  "$ref": "ItemType",
                  "optional": true,
                  "description": "The type of menu item. Defaults to 'normal' if not specified."
                },
                "id": {
                  "type": "string",
                  "optional": true,
                  "description": "The unique ID to assign to this item. Mandatory for event pages. Cannot be the same as another ID for this extension."
                },
                "icons": {
                  "type": "object",
                  "optional": true,
                  "patternProperties": {
                    "^[1-9]\\d*$": {
                      "type": "string"
                    }
                  }
                },
                "title": {
                  "type": "string",
                  "optional": true,
                  "description": "The text to be displayed in the item; this is <em>required</em> unless <code>type</code> is 'separator'. When the context is 'selection', you can use <code>%s</code> within the string to show the selected text. For example, if this parameter's value is \"Translate '%s' to Pig Latin\" and the user selects the word \"cool\", the context menu item for the selection is \"Translate 'cool' to Pig Latin\". To specify an access key for the new menu entry, include a <code>&</code> before the desired letter in the title. For example \"&Help\"."
                },
                "checked": {
                  "type": "boolean",
                  "optional": true,
                  "description": "The initial state of a checkbox or radio item: true for selected and false for unselected. Only one radio item can be selected at a time in a given group of radio items."
                },
                "contexts": {
                  "type": "array",
                  "items": {
                    "$ref": "ContextType"
                  },
                  "minItems": 1,
                  "optional": true,
                  "description": "List of contexts this menu item will appear in. Defaults to ['page'] if not specified."
                },
                "viewTypes": {
                  "type": "array",
                  "items": {
                    "$ref": "extension.ViewType"
                  },
                  "minItems": 1,
                  "optional": true,
                  "description": "List of view types where the menu item will be shown. Defaults to any view, including those without a viewType."
                },
                "visible": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether the item is visible in the menu."
                },
                "onclick": {
                  "type": "function",
                  "optional": true,
                  "description": "A function that will be called back when the menu item is clicked. Event pages cannot use this.",
                  "parameters": [
                    {
                      "name": "info",
                      "$ref": "OnClickData",
                      "description": "Information about the item clicked and the context where the click happened."
                    },
                    {
                      "name": "tab",
                      "$ref": "tabs.Tab",
                      "description": "The details of the tab where the click took place. Note: this parameter only present for extensions."
                    }
                  ]
                },
                "parentId": {
                  "choices": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "optional": true,
                  "description": "The ID of a parent menu item; this makes the item a child of a previously added item."
                },
                "documentUrlPatterns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "optional": true,
                  "description": "Lets you restrict the item to apply only to documents whose URL matches one of the given patterns. (This applies to frames as well.) For details on the format of a pattern, see `Match Patterns <https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Match_patterns>`_."
                },
                "targetUrlPatterns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "optional": true,
                  "description": "Similar to documentUrlPatterns, but lets you filter based on the src attribute of img/audio/video tags and the href of anchor tags."
                },
                "enabled": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether this context menu item is enabled or disabled. Defaults to true."
                },
                "command": {
                  "type": "string",
                  "optional": true,
                  "description": "Specifies a command to issue for the context click.  Currently supports internal command _execute_browser_action."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "description": "Called when the item has been created in the browser. If there were any problems creating the item, details will be available in `runtime.lastError <https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/lastError>`_.",
              "parameters": []
            }
          ]
        },
        {
          "name": "update",
          "type": "function",
          "description": "Updates a previously created context menu item.",
          "async": "callback",
          "parameters": [
            {
              "choices": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "name": "id",
              "description": "The ID of the item to update."
            },
            {
              "type": "object",
              "name": "updateProperties",
              "description": "The properties to update. Accepts the same values as the create function.",
              "properties": {
                "type": {
                  "$ref": "ItemType",
                  "optional": true
                },
                "icons": {
                  "type": "object",
                  "optional": "omit-key-if-missing",
                  "patternProperties": {
                    "^[1-9]\\d*$": {
                      "type": "string"
                    }
                  }
                },
                "title": {
                  "type": "string",
                  "optional": true
                },
                "checked": {
                  "type": "boolean",
                  "optional": true
                },
                "contexts": {
                  "type": "array",
                  "items": {
                    "$ref": "ContextType"
                  },
                  "minItems": 1,
                  "optional": true
                },
                "viewTypes": {
                  "type": "array",
                  "items": {
                    "$ref": "extension.ViewType"
                  },
                  "minItems": 1,
                  "optional": true
                },
                "visible": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether the item is visible in the menu."
                },
                "onclick": {
                  "type": "function",
                  "optional": "omit-key-if-missing",
                  "parameters": [
                    {
                      "name": "info",
                      "$ref": "OnClickData"
                    },
                    {
                      "name": "tab",
                      "$ref": "tabs.Tab",
                      "description": "The details of the tab where the click took place. Note: this parameter only present for extensions."
                    }
                  ]
                },
                "parentId": {
                  "choices": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "optional": true,
                  "description": "Note: You cannot change an item to be a child of one of its own descendants."
                },
                "documentUrlPatterns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "optional": true
                },
                "targetUrlPatterns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "optional": true
                },
                "enabled": {
                  "type": "boolean",
                  "optional": true
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [],
              "description": "Called when the context menu has been updated."
            }
          ]
        },
        {
          "name": "remove",
          "type": "function",
          "description": "Removes a context menu item.",
          "async": "callback",
          "parameters": [
            {
              "choices": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "name": "menuItemId",
              "description": "The ID of the context menu item to remove."
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [],
              "description": "Called when the context menu has been removed."
            }
          ]
        },
        {
          "name": "removeAll",
          "type": "function",
          "description": "Removes all context menu items added by this extension.",
          "async": "callback",
          "parameters": [
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [],
              "description": "Called when removal is complete."
            }
          ]
        },
        {
          "name": "overrideContext",
          "permissions": [
            "menus.overrideContext"
          ],
          "type": "function",
          "description": "Show the matching menu items from this extension instead of the default menu. This should be called during a 'contextmenu' DOM event handler, and only applies to the menu that opens after this event.",
          "parameters": [
            {
              "name": "contextOptions",
              "type": "object",
              "properties": {
                "showDefaults": {
                  "type": "boolean",
                  "optional": true,
                  "default": false,
                  "description": "Whether to also include default menu items in the menu."
                },
                "context": {
                  "type": "string",
                  "enum": [
                    "tab"
                  ],
                  "optional": true,
                  "description": "ContextType to override, to allow menu items from other extensions in the menu. Currently only 'tab' is supported. showDefaults cannot be used with this option."
                },
                "tabId": {
                  "type": "integer",
                  "minimum": 0,
                  "optional": true,
                  "description": "Required when context is 'tab'. Requires the <permission>tabs</permission> permission."
                }
              }
            }
          ]
        },
        {
          "name": "refresh",
          "type": "function",
          "description": "Updates the extension items in the shown menu, including changes that have been made since the menu was shown. Has no effect if the menu is hidden. Rebuilding a shown menu is an expensive operation, only invoke this method when necessary.",
          "async": true,
          "parameters": []
        }
      ],
      "events": [
        {
          "name": "onClicked",
          "type": "function",
          "description": "Fired when a context menu item is clicked. This is a user input event handler. For asynchronous listeners some `restrictions <https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/User_actions>`__ apply.",
          "parameters": [
            {
              "name": "info",
              "$ref": "OnClickData",
              "description": "Information about the item clicked and the context where the click happened."
            },
            {
              "name": "tab",
              "$ref": "tabs.Tab",
              "description": "The details of the tab where the click took place. If the click did not take place in a tab, this parameter will be missing.",
              "optional": true
            }
          ]
        },
        {
          "name": "onShown",
          "type": "function",
          "description": "Fired when a menu is shown. The extension can add, modify or remove menu items and call ``menus.refresh()`` to update the menu.",
          "parameters": [
            {
              "name": "info",
              "$ref": "OnShowData",
              "description": "Information about the context of the menu action and the created menu items."
            },
            {
              "name": "tab",
              "$ref": "tabs.Tab",
              "description": "The details of the tab where the menu was opened."
            }
          ]
        },
        {
          "name": "onHidden",
          "type": "function",
          "description": "Fired when a menu is hidden. This event is only fired if onShown has fired before.",
          "parameters": []
        }
      ]
    }
  ],
  "menus_child.json": [
    {
      "namespace": "menus",
      "permissions": [
        "menus"
      ],
      "allowedContexts": [
        "content",
        "devtools"
      ],
      "description": "The part of the menus API that is available in all extension contexts, including content scripts.",
      "functions": [
        {
          "name": "getTargetElement",
          "type": "function",
          "allowedContexts": [
            "content",
            "devtools"
          ],
          "description": "Retrieve the element that was associated with a recent contextmenu event.",
          "parameters": [
            {
              "type": "integer",
              "description": "The identifier of the clicked element, available as info.targetElementId in the menus.onShown, onClicked or onclick event.",
              "name": "targetElementId"
            }
          ],
          "returns": {
            "type": "object",
            "optional": true,
            "isInstanceOf": "Element",
            "additionalProperties": {
              "type": "any"
            }
          }
        }
      ]
    }
  ],
  "messageDisplay.json": [
    {
      "namespace": "messageDisplay",
      "permissions": [
        "messagesRead"
      ],
      "events": [
        {
          "name": "onMessageDisplayed",
          "type": "function",
          "description": "Fired when a message is displayed, whether in a 3-pane tab, a message tab, or a message window.",
          "parameters": [
            {
              "name": "tab",
              "$ref": "tabs.Tab"
            },
            {
              "name": "message",
              "$ref": "messages.MessageHeader"
            }
          ]
        },
        {
          "name": "onMessagesDisplayed",
          "type": "function",
          "description": "Fired when either a single message is displayed or when multiple messages are displayed, whether in a 3-pane tab, a message tab, or a message window.",
          "parameters": [
            {
              "name": "tab",
              "$ref": "tabs.Tab"
            },
            {
              "name": "messages",
              "type": "array",
              "items": {
                "$ref": "messages.MessageHeader"
              }
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "getDisplayedMessage",
          "type": "function",
          "description": "Gets the currently displayed message in the specified tab. It returns null if no messages are displayed, or if multiple messages are displayed.",
          "async": "callback",
          "parameters": [
            {
              "name": "tabId",
              "type": "integer",
              "minimum": 1
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "choices": [
                    {
                      "$ref": "messages.MessageHeader"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "getDisplayedMessages",
          "type": "function",
          "description": "Gets an array of the currently displayed messages in the specified tab. The array is empty if no messages are displayed.",
          "async": "callback",
          "parameters": [
            {
              "name": "tabId",
              "type": "integer",
              "minimum": 1
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "messages.MessageHeader"
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "messageDisplayAction.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "WebExtensionManifest",
          "properties": {
            "message_display_action": {
              "type": "object",
              "additionalProperties": {
                "$ref": "UnrecognizedProperty"
              },
              "properties": {
                "default_label": {
                  "type": "string",
                  "description": "The label of the messageDisplayAction, defaults to its title. Can be set to an empty string to not display any label. If the containing toolbar is configured to display text only, the title will be used as fallback.",
                  "optional": true,
                  "preprocess": "localize"
                },
                "default_title": {
                  "type": "string",
                  "description": "The title of the messageDisplayAction. This shows up in the tooltip and the label. Defaults to the add-on name.",
                  "optional": true,
                  "preprocess": "localize"
                },
                "default_icon": {
                  "$ref": "IconPath",
                  "description": "The icon for the messageDisplayAction.",
                  "optional": true
                },
                "theme_icons": {
                  "type": "array",
                  "optional": true,
                  "minItems": 1,
                  "items": {
                    "$ref": "ThemeIcons"
                  },
                  "description": "Specifies icons to use for dark and light themes"
                },
                "default_popup": {
                  "type": "string",
                  "format": "relativeUrl",
                  "optional": true,
                  "description": "The html document to be opened as a popup when the user clicks on the messageDisplayAction's icon.",
                  "preprocess": "localize"
                },
                "browser_style": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Enable browser styles. See the `MDN documentation on browser styles <https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/user_interface/Browser_styles>`__ for more information.",
                  "default": false
                },
                "default_area": {
                  "description": "Currently unused.",
                  "type": "string",
                  "optional": true
                }
              },
              "optional": true
            }
          }
        }
      ]
    },
    {
      "namespace": "messageDisplayAction",
      "description": "Use a messageDisplayAction to put an icon in the message display toolbar. In addition to its icon, a messageDisplayAction can also have a tooltip, a badge, and a popup.",
      "permissions": [
        "manifest:message_display_action"
      ],
      "types": [
        {
          "id": "Details",
          "type": "object",
          "description": "Specifies to which tab or window the value should be set, or from which one it should be retrieved. If no tab nor window is specified, the global value is set or retrieved.",
          "properties": {
            "tabId": {
              "type": "integer",
              "optional": true,
              "minimum": 0,
              "description": "When setting a value, it will be specific to the specified tab, and will automatically reset when the tab navigates. When getting, specifies the tab to get the value from; if there is no tab-specific value, the window one will be inherited."
            },
            "windowId": {
              "type": "integer",
              "optional": true,
              "minimum": -2,
              "description": "When setting a value, it will be specific to the specified window. When getting, specifies the window to get the value from; if there is no window-specific value, the global one will be inherited."
            }
          }
        },
        {
          "id": "ColorArray",
          "type": "array",
          "description": "An array of four integers in the range [0,255] that make up the RGBA color. For example, opaque red is <code>[255, 0, 0, 255]</code>.",
          "items": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
          },
          "minItems": 4,
          "maxItems": 4
        },
        {
          "id": "ImageDataType",
          "type": "object",
          "isInstanceOf": "ImageData",
          "additionalProperties": {
            "type": "any"
          },
          "postprocess": "convertImageDataToURL",
          "description": "Pixel data for an image. Must be an ImageData object (for example, from a <code>canvas</code> element)."
        },
        {
          "id": "ImageDataDictionary",
          "type": "object",
          "description": "A ``{size: ImageDataType}`` dictionary representing the icon to be set. The actual :ref:`messageDisplayAction.ImageDataType` to be used is chosen depending on the screen's pixel density. See the `MDN documentation on browser styles <https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/user_interface/Browser_styles>`__ for more information on this. At least one :ref:`messageDisplayAction.ImageDataType` must be specified.",
          "patternProperties": {
            "^[1-9]\\d*$": {
              "$ref": "ImageDataType"
            }
          }
        },
        {
          "id": "OnClickData",
          "type": "object",
          "description": "Information sent when a message display action is clicked.",
          "properties": {
            "modifiers": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Shift",
                  "Alt",
                  "Command",
                  "Ctrl",
                  "MacCtrl"
                ]
              },
              "description": "An array of keyboard modifiers that were held while the menu item was clicked."
            },
            "button": {
              "type": "integer",
              "optional": true,
              "description": "An integer value of button by which menu item was clicked."
            }
          }
        }
      ],
      "functions": [
        {
          "name": "setTitle",
          "type": "function",
          "description": "Sets the title of the messageDisplayAction. This shows up in the tooltip and the label. Defaults to the add-on name.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "type": "object",
              "$import": "Details",
              "properties": {
                "title": {
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "The string the messageDisplayAction should display as its label and when moused over."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "getTitle",
          "type": "function",
          "description": "Gets the title of the messageDisplayAction.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "$ref": "Details"
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "result",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "name": "setLabel",
          "type": "function",
          "description": "Sets the label of the messageDisplayAction, defaults to its title. Can be set to an empty string to not display any label. If the containing toolbar is configured to display text only, the title will be used as fallback.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "type": "object",
              "$import": "Details",
              "properties": {
                "label": {
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "The string the messageDisplayAction should use as label. Can be set to an empty string to not display any label. If the containing toolbar is configured to display text only, the title will be used as fallback."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "getLabel",
          "type": "function",
          "description": "Gets the label of the messageDisplayAction.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "$ref": "Details"
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "result",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "name": "setIcon",
          "type": "function",
          "description": "Sets the icon for the messageDisplayAction. The icon can be specified either as the path to an image file or as the pixel data from a canvas element, or as dictionary of either one of those. Either the <b>path</b> or the <b>imageData</b> property must be specified.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "type": "object",
              "$import": "Details",
              "properties": {
                "imageData": {
                  "choices": [
                    {
                      "$ref": "ImageDataType"
                    },
                    {
                      "$ref": "ImageDataDictionary"
                    }
                  ],
                  "optional": true,
                  "description": "Either an ImageDataType object defining a single icon used for all sizes or an ImageDataDictionary object defining dedicated icons for different sizes."
                },
                "path": {
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "manifest.IconPath"
                    }
                  ],
                  "optional": true,
                  "description": "Either a relative image path defining a single icon used for all sizes or an IconPathDictionary object defining dedicated icons for different sizes."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "setPopup",
          "type": "function",
          "description": "Sets the html document to be opened as a popup when the user clicks on the messageDisplayAction's icon.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "type": "object",
              "$import": "Details",
              "properties": {
                "popup": {
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "The html file to show in a popup.  If set to the empty string (''), no popup is shown."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "getPopup",
          "type": "function",
          "description": "Gets the html document set as the popup for this messageDisplayAction.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "$ref": "Details"
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "result",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "name": "setBadgeText",
          "type": "function",
          "description": "Sets the badge text for the messageDisplayAction. The badge is displayed on top of the icon.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "type": "object",
              "$import": "Details",
              "properties": {
                "text": {
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "null"
                    }
                  ],
                  "description": "Any number of characters can be passed, but only about four can fit in the space."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "getBadgeText",
          "type": "function",
          "description": "Gets the badge text of the messageDisplayAction. If no tab nor window is specified, the global badge text is returned.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "$ref": "Details"
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "result",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "name": "setBadgeBackgroundColor",
          "type": "function",
          "description": "Sets the background color for the badge.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "type": "object",
              "$import": "Details",
              "properties": {
                "color": {
                  "description": "An array of four integers in the range [0,255] that make up the RGBA color of the badge. For example, opaque red is <code>[255, 0, 0, 255]</code>. Can also be a string with a CSS value, with opaque red being <code>#FF0000</code> or <code>#F00</code>.",
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "ColorArray"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "getBadgeBackgroundColor",
          "type": "function",
          "description": "Gets the background color of the messageDisplayAction.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "$ref": "Details"
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "result",
                  "$ref": "ColorArray"
                }
              ]
            }
          ]
        },
        {
          "name": "enable",
          "type": "function",
          "description": "Enables the messageDisplayAction for a tab. By default, a messageDisplayAction is enabled.",
          "async": "callback",
          "parameters": [
            {
              "type": "integer",
              "optional": true,
              "name": "tabId",
              "minimum": 0,
              "description": "The id of the tab for which you want to modify the messageDisplayAction."
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "disable",
          "type": "function",
          "description": "Disables the messageDisplayAction for a tab.",
          "async": "callback",
          "parameters": [
            {
              "type": "integer",
              "optional": true,
              "name": "tabId",
              "minimum": 0,
              "description": "The id of the tab for which you want to modify the messageDisplayAction."
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "isEnabled",
          "type": "function",
          "description": "Checks whether the messageDisplayAction is enabled.",
          "async": "callback",
          "parameters": [
            {
              "name": "details",
              "$ref": "Details"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "boolean"
                }
              ]
            }
          ]
        },
        {
          "name": "openPopup",
          "type": "function",
          "requireUserInput": true,
          "description": "Opens the extension popup window in the active window.",
          "async": true,
          "parameters": []
        }
      ],
      "events": [
        {
          "name": "onClicked",
          "type": "function",
          "description": "Fired when a messageDisplayAction icon is clicked.  This event will not fire if the messageDisplayAction has a popup. This is a user input event handler. For asynchronous listeners some `restrictions <https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/User_actions>`__ apply.",
          "parameters": [
            {
              "name": "tab",
              "$ref": "tabs.Tab"
            },
            {
              "name": "info",
              "$ref": "OnClickData",
              "optional": true
            }
          ]
        }
      ]
    }
  ],
  "messages.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "OptionalPermission",
          "choices": [
            {
              "type": "string",
              "enum": [
                "messagesMove",
                "messagesRead",
                "messagesDelete"
              ]
            }
          ]
        }
      ]
    },
    {
      "namespace": "messages",
      "permissions": [
        "messagesRead"
      ],
      "types": [
        {
          "id": "MessageHeader",
          "type": "object",
          "description": "Basic information about a message.",
          "properties": {
            "author": {
              "type": "string"
            },
            "bccList": {
              "description": "The Bcc recipients. Not populated for news/nntp messages.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ccList": {
              "description": "The Cc recipients. Not populated for news/nntp messages.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "date": {
              "$ref": "extensionTypes.Date"
            },
            "flagged": {
              "type": "boolean"
            },
            "folder": {
              "$ref": "folders.MailFolder",
              "description": "The <permission>accountsRead</permission> permission is required for this property to be included."
            },
            "headerMessageId": {
              "type": "string",
              "description": "The message-id header of the message."
            },
            "id": {
              "type": "integer",
              "minimum": 1
            },
            "junk": {
              "description": "Not populated for news/nntp messages.",
              "type": "boolean"
            },
            "junkScore": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            },
            "read": {
              "type": "boolean"
            },
            "recipients": {
              "description": "The To recipients. Not populated for news/nntp messages.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "size": {
              "description": "The total size of the message in bytes.",
              "type": "integer"
            },
            "subject": {
              "type": "string"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        {
          "id": "MessageList",
          "type": "object",
          "description": "See :doc:`how-to/messageLists` for more information.",
          "properties": {
            "id": {
              "type": "string",
              "optional": true
            },
            "messages": {
              "type": "array",
              "items": {
                "$ref": "MessageHeader"
              }
            }
          }
        },
        {
          "id": "MessagePart",
          "type": "object",
          "description": "Represents an email message \"part\", which could be the whole message",
          "properties": {
            "body": {
              "type": "string",
              "description": "The content of the part",
              "optional": true
            },
            "contentType": {
              "type": "string",
              "optional": true
            },
            "headers": {
              "type": "object",
              "description": "An object of part headers, with the header name as key, and an array of header values as value",
              "optional": true,
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "name": {
              "type": "string",
              "description": "Name of the part, if it is a file",
              "optional": true
            },
            "partName": {
              "type": "string",
              "optional": true
            },
            "parts": {
              "type": "array",
              "items": {
                "$ref": "MessagePart"
              },
              "description": "Any sub-parts of this part",
              "optional": true
            },
            "size": {
              "type": "integer",
              "optional": true
            }
          }
        },
        {
          "id": "MessageChangeProperties",
          "type": "object",
          "description": "Message properties that can be updated by the :ref:`messages.update` and that are monitored by :ref:`messages.onUpdated`.",
          "properties": {
            "read": {
              "type": "boolean",
              "description": "Message is read.",
              "optional": true
            },
            "junk": {
              "type": "boolean",
              "optional": true,
              "description": "Message is junk."
            },
            "flagged": {
              "type": "boolean",
              "description": "Message is flagged.",
              "optional": true
            },
            "tags": {
              "type": "array",
              "description": "Tags associated with this message. For a list of available tags, call the listTags method.",
              "optional": true,
              "items": {
                "type": "string"
              }
            }
          }
        },
        {
          "id": "MessageTag",
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "Distinct tag identifier – use this string when referring to a tag"
            },
            "tag": {
              "type": "string",
              "description": "Human-readable tag name"
            },
            "color": {
              "type": "string",
              "description": "Tag color"
            },
            "ordinal": {
              "type": "string",
              "description": "Custom sort string (usually empty)"
            }
          }
        },
        {
          "id": "TagsDetail",
          "type": "object",
          "description": "Used for filtering messages by tag in various methods. Note that functions using this type may have a partial implementation.",
          "properties": {
            "tags": {
              "type": "object",
              "description": "Object keys are tags to filter on, values are <code>true</code> if the message must have the tag, or <code>false</code> if it must not have the tag. For a list of available tags, call the :ref:`messages.listTags` method.",
              "patternProperties": {
                ".*": {
                  "type": "boolean"
                }
              }
            },
            "mode": {
              "type": "string",
              "description": "Whether all of the tag filters must apply, or any of them.",
              "enum": [
                "all",
                "any"
              ]
            }
          }
        },
        {
          "id": "Attachment",
          "type": "object",
          "description": "Represents an attachment in a message.",
          "properties": {
            "contentType": {
              "type": "string",
              "description": "The content type of the attachment."
            },
            "name": {
              "type": "string",
              "description": "The name, as displayed to the user, of this attachment. This is usually but not always the filename of the attached file."
            },
            "partName": {
              "type": "string",
              "description": "Identifies the MIME part of the message associated with this attachment."
            },
            "size": {
              "type": "integer",
              "description": "The size in bytes of this attachment."
            }
          }
        }
      ],
      "events": [
        {
          "name": "onUpdated",
          "type": "function",
          "description": "Fired when one or more properties of a message have been updated.",
          "parameters": [
            {
              "name": "message",
              "$ref": "messages.MessageHeader"
            },
            {
              "name": "changedProperties",
              "$ref": "messages.MessageChangeProperties"
            }
          ]
        },
        {
          "name": "onMoved",
          "type": "function",
          "description": "Fired when messages have been moved.",
          "permissions": [
            "accountsRead"
          ],
          "parameters": [
            {
              "name": "originalMessages",
              "$ref": "messages.MessageList"
            },
            {
              "name": "movedMessages",
              "$ref": "messages.MessageList"
            }
          ]
        },
        {
          "name": "onCopied",
          "type": "function",
          "description": "Fired when messages have been copied.",
          "permissions": [
            "accountsRead"
          ],
          "parameters": [
            {
              "name": "originalMessages",
              "$ref": "messages.MessageList"
            },
            {
              "name": "copiedMessages",
              "$ref": "messages.MessageList"
            }
          ]
        },
        {
          "name": "onDeleted",
          "type": "function",
          "description": "Fired when messages have been permanently deleted.",
          "permissions": [
            "accountsRead"
          ],
          "parameters": [
            {
              "name": "messages",
              "$ref": "messages.MessageList"
            }
          ]
        },
        {
          "name": "onNewMailReceived",
          "type": "function",
          "description": "Fired when a new message is received, and has been through junk classification and message filters.",
          "permissions": [
            "accountsRead"
          ],
          "parameters": [
            {
              "name": "folder",
              "$ref": "folders.MailFolder"
            },
            {
              "name": "messages",
              "$ref": "messages.MessageList"
            }
          ]
        }
      ],
      "functions": [
        {
          "name": "list",
          "type": "function",
          "description": "Gets all messages in a folder.",
          "async": "callback",
          "permissions": [
            "accountsRead"
          ],
          "parameters": [
            {
              "name": "folder",
              "$ref": "folders.MailFolder"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "MessageList"
                }
              ]
            }
          ]
        },
        {
          "name": "continueList",
          "type": "function",
          "description": "Returns the next chunk of messages in a list. See :doc:`how-to/messageLists` for more information.",
          "async": "callback",
          "parameters": [
            {
              "name": "messageListId",
              "type": "string"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "MessageList"
                }
              ]
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "description": "Returns a specified message.",
          "async": "callback",
          "parameters": [
            {
              "name": "messageId",
              "type": "integer"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "MessageHeader"
                }
              ]
            }
          ]
        },
        {
          "name": "getFull",
          "type": "function",
          "description": "Returns a specified message, including all headers and MIME parts.",
          "async": "callback",
          "parameters": [
            {
              "name": "messageId",
              "type": "integer"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "MessagePart"
                }
              ]
            }
          ]
        },
        {
          "name": "getRaw",
          "type": "function",
          "description": "Returns the unmodified source of a message as a `binary string <https://developer.mozilla.org/en-US/docs/Web/API/DOMString/Binary>`__, which is a simple series of 8-bit values. If the message contains non-ASCII characters, the body parts in the binary string cannot be read directly and must be decoded according to their character sets. Use :ref:`messages.getFull` to get the correctly decoded parts. Manually decoding the raw message is probably too error-prone, especially if the message contains MIME parts with different character set encodings or attachments.\n\nTo get a readable version of the raw message as it appears in Thunderbird's message source view, it may be sufficient to decode the message according to the character set specified in its main ``content-type`` header (example: `text/html; charset=UTF-8`) using the following function (see MDN for `supported input encodings <https://developer.mozilla.org/en-US/docs/Web/API/Encoding_API/Encodings>`__): <literalinclude>includes/messages/decodeBinaryString.js<lang>JavaScript</lang></literalinclude>",
          "async": "callback",
          "parameters": [
            {
              "name": "messageId",
              "type": "integer"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "name": "listAttachments",
          "type": "function",
          "description": "Lists all of the attachments of a message.",
          "async": "callback",
          "parameters": [
            {
              "name": "messageId",
              "type": "integer"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "Attachment"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "getAttachmentFile",
          "type": "function",
          "description": "Gets the content of an attachment as a DOM <code>File</code> object.",
          "async": "callback",
          "parameters": [
            {
              "name": "messageId",
              "type": "integer"
            },
            {
              "name": "partName",
              "type": "string",
              "pattern": "^\\d+(\\.\\d+)*$"
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "object",
                  "isInstanceOf": "File",
                  "additionalProperties": true
                }
              ]
            }
          ]
        },
        {
          "name": "query",
          "type": "function",
          "description": "Gets all messages that have the specified properties, or all messages if no properties are specified.",
          "async": "callback",
          "parameters": [
            {
              "type": "object",
              "name": "queryInfo",
              "properties": {
                "attachment": {
                  "type": "boolean",
                  "optional": true,
                  "description": "If specified, returns only messages with or without attachments."
                },
                "author": {
                  "type": "string",
                  "optional": true,
                  "description": "Returns only messages with this value matching the author. The search value is a single email address, a name or a combination (e.g.: ``Name <user@domain.org>``). The address part of the search value (if provided) must match the author's address completely. The name part of the search value (if provided) must match the author's name partially. All matches are done case-insensitive."
                },
                "body": {
                  "type": "string",
                  "optional": true,
                  "description": "Returns only messages with this value in the body of the mail."
                },
                "flagged": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Returns only flagged (or unflagged if false) messages."
                },
                "folder": {
                  "$ref": "folders.MailFolder",
                  "optional": true,
                  "description": "Returns only messages from the specified folder. The <permission>accountsRead</permission> permission is required."
                },
                "fromDate": {
                  "$ref": "extensionTypes.Date",
                  "optional": true,
                  "description": "Returns only messages with a date after this value."
                },
                "fromMe": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Returns only messages with the author's address matching any configured identity."
                },
                "fullText": {
                  "type": "string",
                  "optional": true,
                  "description": "Returns only messages with this value somewhere in the mail (subject, body or author)."
                },
                "headerMessageId": {
                  "type": "string",
                  "optional": true,
                  "description": "Returns only messages with a Message-ID header matching this value."
                },
                "includeSubFolders": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Search the folder specified by ``queryInfo.folder`` recursively."
                },
                "recipients": {
                  "type": "string",
                  "optional": true,
                  "description": "Returns only messages whose recipients match all specified addresses. The search value is a semicolon separated list of email addresses, names or combinations (e.g.: ``Name <user@domain.org>``). For a match, all specified addresses must equal a recipient's address completely and all specified names must match a recipient's name partially. All matches are done case-insensitive."
                },
                "subject": {
                  "type": "string",
                  "optional": true,
                  "description": "Returns only messages with this value matching the subject."
                },
                "tags": {
                  "$ref": "TagsDetail",
                  "optional": true,
                  "description": "Returns only messages with the specified tags. For a list of available tags, call the :ref:`messages.listTags` method."
                },
                "toDate": {
                  "$ref": "extensionTypes.Date",
                  "optional": true,
                  "description": "Returns only messages with a date before this value."
                },
                "toMe": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Returns only messages with at least one recipient address matching any configured identity."
                },
                "unread": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Returns only unread (or read if false) messages."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "$ref": "MessageList"
                }
              ]
            }
          ]
        },
        {
          "name": "update",
          "type": "function",
          "description": "Marks or unmarks a message as junk, read, flagged, or tagged.",
          "async": true,
          "parameters": [
            {
              "name": "messageId",
              "type": "integer",
              "minimum": 1
            },
            {
              "name": "newProperties",
              "$ref": "MessageChangeProperties"
            }
          ]
        },
        {
          "name": "move",
          "type": "function",
          "description": "Moves messages to a specified folder.",
          "async": true,
          "permissions": [
            "accountsRead",
            "messagesMove"
          ],
          "parameters": [
            {
              "name": "messageIds",
              "type": "array",
              "description": "The IDs of the messages to move.",
              "items": {
                "type": "integer",
                "minimum": 1
              }
            },
            {
              "name": "destination",
              "$ref": "folders.MailFolder",
              "description": "The folder to move the messages to."
            }
          ]
        },
        {
          "name": "copy",
          "type": "function",
          "description": "Copies messages to a specified folder.",
          "async": true,
          "permissions": [
            "accountsRead",
            "messagesMove"
          ],
          "parameters": [
            {
              "name": "messageIds",
              "type": "array",
              "description": "The IDs of the messages to copy.",
              "items": {
                "type": "integer",
                "minimum": 1
              }
            },
            {
              "name": "destination",
              "$ref": "folders.MailFolder",
              "description": "The folder to copy the messages to."
            }
          ]
        },
        {
          "name": "delete",
          "type": "function",
          "description": "Deletes messages permanently, or moves them to the trash folder (honoring the account's deletion behavior settings). The ``skipTrash`` parameter allows immediate permanent deletion, bypassing the trash folder.\n**Note**: Consider using :ref:`messages.move` to manually move messages to the account's trash folder, instead of requesting the overly powerful permission to actually delete messages. The account's trash folder can be extracted as follows: <literalinclude>includes/messages/getTrash.js<lang>JavaScript</lang></literalinclude>",
          "async": true,
          "permissions": [
            "messagesDelete"
          ],
          "parameters": [
            {
              "name": "messageIds",
              "type": "array",
              "description": "The IDs of the messages to delete.",
              "items": {
                "type": "integer",
                "minimum": 1
              }
            },
            {
              "name": "skipTrash",
              "type": "boolean",
              "description": "If true, the message will be deleted permanently, regardless of the account's deletion behavior settings.",
              "optional": true
            }
          ]
        },
        {
          "name": "archive",
          "type": "function",
          "description": "Archives messages using the current settings.",
          "async": true,
          "permissions": [
            "messagesMove"
          ],
          "parameters": [
            {
              "name": "messageIds",
              "type": "array",
              "description": "The IDs of the messages to archive.",
              "items": {
                "type": "integer",
                "minimum": 1
              }
            }
          ]
        },
        {
          "name": "listTags",
          "type": "function",
          "description": "Returns a list of tags that can be set on messages, and their human-friendly name, colour, and sort order.",
          "async": "callback",
          "parameters": [
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "MessageTag"
                  }
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "tabs.json": [
    {
      "namespace": "manifest",
      "types": [
        {
          "$extend": "OptionalPermissionNoPrompt",
          "choices": [
            {
              "type": "string",
              "enum": [
                "activeTab"
              ]
            }
          ]
        },
        {
          "$extend": "OptionalPermission",
          "choices": [
            {
              "type": "string",
              "enum": [
                "tabs",
                "tabHide"
              ]
            }
          ]
        }
      ]
    },
    {
      "namespace": "tabs",
      "description": "Use the <code>browser.tabs</code> API to interact with the browser's tab system. You can use this API to create, modify, and rearrange tabs in the browser.",
      "types": [
        {
          "id": "Tab",
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "minimum": -1,
              "optional": true,
              "description": "The ID of the tab. Tab IDs are unique within a browser session. Under some circumstances a Tab may not be assigned an ID. Tab ID can also be set to :ref:`tabs.TAB_ID_NONE` for apps and devtools windows."
            },
            "index": {
              "type": "integer",
              "minimum": -1,
              "description": "The zero-based index of the tab within its window."
            },
            "windowId": {
              "type": "integer",
              "optional": true,
              "minimum": 0,
              "description": "The ID of the window the tab is contained within."
            },
            "selected": {
              "type": "boolean",
              "description": "Whether the tab is selected.",
              "deprecated": "Please use :ref:`tabs.Tab.highlighted`.",
              "unsupported": true
            },
            "highlighted": {
              "type": "boolean",
              "description": "Whether the tab is highlighted. Works as an alias of active"
            },
            "active": {
              "type": "boolean",
              "description": "Whether the tab is active in its window. (Does not necessarily mean the window is focused.)"
            },
            "url": {
              "type": "string",
              "optional": true,
              "permissions": [
                "tabs"
              ],
              "description": "The URL the tab is displaying. This property is only present if the extension's manifest includes the <permission>tabs</permission> permission."
            },
            "title": {
              "type": "string",
              "optional": true,
              "permissions": [
                "tabs"
              ],
              "description": "The title of the tab. This property is only present if the extension's manifest includes the <permission>tabs</permission> permission."
            },
            "favIconUrl": {
              "type": "string",
              "optional": true,
              "permissions": [
                "tabs"
              ],
              "description": "The URL of the tab's favicon. This property is only present if the extension's manifest includes the <permission>tabs</permission> permission. It may also be an empty string if the tab is loading."
            },
            "status": {
              "type": "string",
              "optional": true,
              "description": "Either <em>loading</em> or <em>complete</em>."
            },
            "width": {
              "type": "integer",
              "optional": true,
              "description": "The width of the tab in pixels."
            },
            "height": {
              "type": "integer",
              "optional": true,
              "description": "The height of the tab in pixels."
            },
            "type": {
              "type": "string",
              "enum": [
                "addressBook",
                "calendar",
                "calendarEvent",
                "calendarTask",
                "chat",
                "content",
                "mail",
                "messageCompose",
                "messageDisplay",
                "special",
                "tasks"
              ],
              "optional": true
            },
            "mailTab": {
              "type": "boolean",
              "optional": true,
              "description": "Whether the tab is a 3-pane tab."
            }
          }
        },
        {
          "id": "TabStatus",
          "type": "string",
          "enum": [
            "loading",
            "complete"
          ],
          "description": "Whether the tabs have completed loading."
        },
        {
          "id": "WindowType",
          "type": "string",
          "description": "The type of a window. Under some circumstances a Window may not be assigned a type property.",
          "enum": [
            "normal",
            "popup",
            "panel",
            "app",
            "devtools",
            "addressBook",
            "messageCompose",
            "messageDisplay"
          ]
        },
        {
          "id": "UpdatePropertyName",
          "type": "string",
          "enum": [
            "favIconUrl",
            "status",
            "title"
          ],
          "description": "Event names supported in onUpdated."
        },
        {
          "id": "UpdateFilter",
          "type": "object",
          "description": "An object describing filters to apply to tabs.onUpdated events.",
          "properties": {
            "urls": {
              "type": "array",
              "description": "A list of URLs or URL patterns. Events that cannot match any of the URLs will be filtered out.  Filtering with urls requires the <permission>tabs</permission> or  <permission>activeTab</permission> permission.",
              "optional": true,
              "items": {
                "type": "string"
              },
              "minItems": 1
            },
            "properties": {
              "type": "array",
              "optional": true,
              "description": "A list of property names. Events that do not match any of the names will be filtered out.",
              "items": {
                "$ref": "UpdatePropertyName"
              },
              "minItems": 1
            },
            "tabId": {
              "type": "integer",
              "optional": true
            },
            "windowId": {
              "type": "integer",
              "optional": true
            }
          }
        }
      ],
      "properties": {
        "TAB_ID_NONE": {
          "value": -1,
          "description": "An ID which represents the absence of a browser tab."
        }
      },
      "functions": [
        {
          "name": "get",
          "type": "function",
          "description": "Retrieves details about the specified tab.",
          "async": "callback",
          "parameters": [
            {
              "type": "integer",
              "name": "tabId",
              "minimum": 0
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "tab",
                  "$ref": "Tab"
                }
              ]
            }
          ]
        },
        {
          "name": "getCurrent",
          "type": "function",
          "description": "Gets the tab that this script call is being made from. May be undefined if called from a non-tab context (for example: a background page or popup view).",
          "async": "callback",
          "parameters": [
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "tab",
                  "$ref": "Tab",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "name": "connect",
          "type": "function",
          "description": "Connects to the content script(s) in the specified tab. The `runtime.onConnect <https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onConnect>`_ event is fired in each content script running in the specified tab for the current extension. For more details, see `Content Script Messaging <https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Content_scripts>`_.",
          "parameters": [
            {
              "type": "integer",
              "name": "tabId",
              "minimum": 0
            },
            {
              "type": "object",
              "name": "connectInfo",
              "properties": {
                "name": {
                  "type": "string",
                  "optional": true,
                  "description": "Will be passed into onConnect for content scripts that are listening for the connection event."
                },
                "frameId": {
                  "type": "integer",
                  "optional": true,
                  "minimum": 0,
                  "description": "Open a port to a specific frame identified by <code>frameId</code> instead of all frames in the tab."
                }
              },
              "optional": true
            }
          ],
          "returns": {
            "$ref": "runtime.Port",
            "description": "A port that can be used to communicate with the content scripts running in the specified tab."
          }
        },
        {
          "name": "sendMessage",
          "type": "function",
          "description": "Sends a single message to the content script(s) in the specified tab, with an optional callback to run when a response is sent back.  The `runtime.onMessage <https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage>`_ event is fired in each content script running in the specified tab for the current extension.",
          "async": "responseCallback",
          "parameters": [
            {
              "type": "integer",
              "name": "tabId",
              "minimum": 0
            },
            {
              "type": "any",
              "name": "message"
            },
            {
              "type": "object",
              "name": "options",
              "properties": {
                "frameId": {
                  "type": "integer",
                  "optional": true,
                  "minimum": 0,
                  "description": "Send a message to a specific frame identified by <code>frameId</code> instead of all frames in the tab."
                }
              },
              "optional": true
            },
            {
              "type": "function",
              "name": "responseCallback",
              "optional": true,
              "parameters": [
                {
                  "name": "response",
                  "type": "any",
                  "description": "The JSON response object sent by the handler of the message. If an error occurs while connecting to the specified tab, the callback will be called with no arguments and `runtime.lastError <https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/lastError>`_ will be set to the error message."
                }
              ]
            }
          ]
        },
        {
          "name": "create",
          "type": "function",
          "description": "Creates a new tab or switches to a tab with the given URL, if it exists already.",
          "async": "callback",
          "parameters": [
            {
              "type": "object",
              "name": "createProperties",
              "properties": {
                "windowId": {
                  "type": "integer",
                  "minimum": -2,
                  "optional": true,
                  "description": "The window to create the new tab in. Defaults to the current window."
                },
                "index": {
                  "type": "integer",
                  "minimum": 0,
                  "optional": true,
                  "description": "The position the tab should take in the window. The provided value will be clamped to between zero and the number of tabs in the window."
                },
                "url": {
                  "type": "string",
                  "optional": true,
                  "description": "The URL to navigate the tab to initially. Fully-qualified URLs must include a scheme (i.e. 'http://www.google.com', not 'www.google.com'). Relative URLs will be relative to the current page within the extension. Defaults to the New Tab Page."
                },
                "active": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether the tab should become the active tab in the window. Does not affect whether the window is focused (see :ref:`windows.update`). Defaults to <var>true</var>."
                },
                "selected": {
                  "deprecated": "Please use <em>active</em>.",
                  "unsupported": true,
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether the tab should become the selected tab in the window. Defaults to <var>true</var>"
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "name": "tab",
                  "$ref": "Tab",
                  "optional": true,
                  "description": "Details about the created tab. Will contain the ID of the new tab."
                }
              ]
            }
          ]
        },
        {
          "name": "duplicate",
          "type": "function",
          "description": "Duplicates a tab.",
          "async": "callback",
          "parameters": [
            {
              "type": "integer",
              "name": "tabId",
              "minimum": 0,
              "description": "The ID of the tab which is to be duplicated."
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "name": "tab",
                  "optional": true,
                  "description": "Details about the duplicated tab. The :ref:`tabs.Tab` object doesn't contain <code>url</code>, <code>title</code> and <code>favIconUrl</code> if the <permission>tabs</permission> permission has not been requested.",
                  "$ref": "Tab"
                }
              ]
            }
          ]
        },
        {
          "name": "query",
          "type": "function",
          "description": "Gets all tabs that have the specified properties, or all tabs if no properties are specified.",
          "async": "callback",
          "parameters": [
            {
              "type": "object",
              "name": "queryInfo",
              "properties": {
                "mailTab": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether the tab is a Thunderbird 3-pane tab."
                },
                "type": {
                  "type": "string",
                  "optional": true,
                  "description": "Match tabs against the given Tab.type (see :ref:`tabs.Tab`). Ignored if ``queryInfo.mailTab`` is specified."
                },
                "active": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether the tabs are active in their windows."
                },
                "highlighted": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether the tabs are highlighted.  Works as an alias of active."
                },
                "currentWindow": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether the tabs are in the current window."
                },
                "lastFocusedWindow": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether the tabs are in the last focused window."
                },
                "status": {
                  "$ref": "TabStatus",
                  "optional": true,
                  "description": "Whether the tabs have completed loading."
                },
                "title": {
                  "type": "string",
                  "optional": true,
                  "description": "Match page titles against a pattern."
                },
                "url": {
                  "choices": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ],
                  "optional": true,
                  "description": "Match tabs against one or more `URL Patterns <https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Match_patterns>`_. Note that fragment identifiers are not matched."
                },
                "windowId": {
                  "type": "integer",
                  "optional": true,
                  "minimum": -2,
                  "description": "The ID of the parent window, or :ref:`windows.WINDOW_ID_CURRENT` for the current window."
                },
                "windowType": {
                  "$ref": "WindowType",
                  "optional": true,
                  "description": "The type of window the tabs are in."
                },
                "index": {
                  "type": "integer",
                  "optional": true,
                  "minimum": 0,
                  "description": "The position of the tabs within their windows."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "result",
                  "type": "array",
                  "items": {
                    "$ref": "Tab"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "update",
          "type": "function",
          "description": "Modifies the properties of a tab. Properties that are not specified in <var>updateProperties</var> are not modified.",
          "async": "callback",
          "parameters": [
            {
              "type": "integer",
              "name": "tabId",
              "minimum": 0,
              "optional": true,
              "description": "Defaults to the selected tab of the current window."
            },
            {
              "type": "object",
              "name": "updateProperties",
              "properties": {
                "url": {
                  "type": "string",
                  "optional": true,
                  "description": "A URL to navigate the tab to."
                },
                "active": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether the tab should be active. Does not affect whether the window is focused (see :ref:`windows.update`)."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "name": "tab",
                  "$ref": "Tab",
                  "optional": true,
                  "description": "Details about the updated tab. The :ref:`tabs.Tab` object doesn't contain <code>url</code>, <code>title</code> and <code>favIconUrl</code> if the <permission>tabs</permission> permission has not been requested."
                }
              ]
            }
          ]
        },
        {
          "name": "move",
          "type": "function",
          "description": "Moves one or more tabs to a new position within its window, or to a new window. Note that tabs can only be moved to and from normal windows (<code>window.type === \"normal\"</code>).",
          "async": "callback",
          "parameters": [
            {
              "name": "tabIds",
              "description": "The tab or list of tabs to move.",
              "choices": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 0
                  }
                }
              ]
            },
            {
              "type": "object",
              "name": "moveProperties",
              "properties": {
                "windowId": {
                  "type": "integer",
                  "minimum": -2,
                  "optional": true,
                  "description": "Defaults to the window the tab is currently in."
                },
                "index": {
                  "type": "integer",
                  "minimum": -1,
                  "description": "The position to move the window to. -1 will place the tab at the end of the window."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "name": "tabs",
                  "description": "Details about the moved tabs.",
                  "choices": [
                    {
                      "$ref": "Tab"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "Tab"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "reload",
          "type": "function",
          "description": "Reload a tab.",
          "async": "callback",
          "parameters": [
            {
              "type": "integer",
              "name": "tabId",
              "minimum": 0,
              "optional": true,
              "description": "The ID of the tab to reload; defaults to the selected tab of the current window."
            },
            {
              "type": "object",
              "name": "reloadProperties",
              "optional": true,
              "properties": {
                "bypassCache": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether using any local cache. Default is false."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "remove",
          "type": "function",
          "description": "Closes one or more tabs.",
          "async": "callback",
          "parameters": [
            {
              "name": "tabIds",
              "description": "The tab or list of tabs to close.",
              "choices": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "minimum": 0
                  }
                }
              ]
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "executeScript",
          "type": "function",
          "description": "Injects JavaScript code into a page. For details, see the `programmatic injection <https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Content_scripts>`_ section of the content scripts doc.",
          "async": "callback",
          "parameters": [
            {
              "type": "integer",
              "name": "tabId",
              "minimum": 0,
              "optional": true,
              "description": "The ID of the tab in which to run the script; defaults to the active tab of the current window."
            },
            {
              "$ref": "extensionTypes.InjectDetails",
              "name": "details",
              "description": "Details of the script to run."
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "description": "Called after all the JavaScript has been executed.",
              "parameters": [
                {
                  "name": "result",
                  "optional": true,
                  "type": "array",
                  "items": {
                    "type": "any"
                  },
                  "description": "The result of the script in every injected frame."
                }
              ]
            }
          ]
        },
        {
          "name": "insertCSS",
          "type": "function",
          "description": "Injects CSS into a page. For details, see the `programmatic injection <https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Content_scripts>`_ section of the content scripts doc.",
          "async": "callback",
          "parameters": [
            {
              "type": "integer",
              "name": "tabId",
              "minimum": 0,
              "optional": true,
              "description": "The ID of the tab in which to insert the CSS; defaults to the active tab of the current window."
            },
            {
              "$ref": "extensionTypes.InjectDetails",
              "name": "details",
              "description": "Details of the CSS text to insert."
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "description": "Called when all the CSS has been inserted.",
              "parameters": []
            }
          ]
        },
        {
          "name": "removeCSS",
          "type": "function",
          "description": "Removes injected CSS from a page. For details, see the `programmatic injection <https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Content_scripts>`_ section of the content scripts doc.",
          "async": "callback",
          "parameters": [
            {
              "type": "integer",
              "name": "tabId",
              "minimum": 0,
              "optional": true,
              "description": "The ID of the tab from which to remove the injected CSS; defaults to the active tab of the current window."
            },
            {
              "$ref": "extensionTypes.InjectDetails",
              "name": "details",
              "description": "Details of the CSS text to remove."
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "description": "Called when all the CSS has been removed.",
              "parameters": []
            }
          ]
        }
      ],
      "events": [
        {
          "name": "onCreated",
          "type": "function",
          "description": "Fired when a tab is created. Note that the tab's URL may not be set at the time this event fired, but you can listen to onUpdated events to be notified when a URL is set.",
          "parameters": [
            {
              "$ref": "Tab",
              "name": "tab",
              "description": "Details of the tab that was created."
            }
          ]
        },
        {
          "name": "onUpdated",
          "type": "function",
          "description": "Fired when a tab is updated.",
          "parameters": [
            {
              "type": "integer",
              "name": "tabId",
              "minimum": 0
            },
            {
              "type": "object",
              "name": "changeInfo",
              "description": "Lists the changes to the state of the tab that was updated.",
              "properties": {
                "status": {
                  "type": "string",
                  "optional": true,
                  "description": "The status of the tab. Can be either <em>loading</em> or <em>complete</em>."
                },
                "url": {
                  "type": "string",
                  "optional": true,
                  "description": "The tab's URL if it has changed."
                },
                "favIconUrl": {
                  "type": "string",
                  "optional": true,
                  "description": "The tab's new favicon URL."
                }
              }
            },
            {
              "$ref": "Tab",
              "name": "tab",
              "description": "Gives the state of the tab that was updated."
            }
          ],
          "extraParameters": [
            {
              "$ref": "UpdateFilter",
              "name": "filter",
              "optional": true,
              "description": "A set of filters that restricts the events that will be sent to this listener."
            }
          ]
        },
        {
          "name": "onMoved",
          "type": "function",
          "description": "Fired when a tab is moved within a window. Only one move event is fired, representing the tab the user directly moved. Move events are not fired for the other tabs that must move in response. This event is not fired when a tab is moved between windows. For that, see :ref:`tabs.onDetached`.",
          "parameters": [
            {
              "type": "integer",
              "name": "tabId",
              "minimum": 0
            },
            {
              "type": "object",
              "name": "moveInfo",
              "properties": {
                "windowId": {
                  "type": "integer",
                  "minimum": 0
                },
                "fromIndex": {
                  "type": "integer",
                  "minimum": 0
                },
                "toIndex": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          ]
        },
        {
          "name": "onActivated",
          "type": "function",
          "description": "Fires when the active tab in a window changes. Note that the tab's URL may not be set at the time this event fired, but you can listen to onUpdated events to be notified when a URL is set.",
          "parameters": [
            {
              "type": "object",
              "name": "activeInfo",
              "properties": {
                "tabId": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "The ID of the tab that has become active."
                },
                "windowId": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "The ID of the window the active tab changed inside of."
                }
              }
            }
          ]
        },
        {
          "name": "onDetached",
          "type": "function",
          "description": "Fired when a tab is detached from a window, for example because it is being moved between windows.",
          "parameters": [
            {
              "type": "integer",
              "name": "tabId",
              "minimum": 0
            },
            {
              "type": "object",
              "name": "detachInfo",
              "properties": {
                "oldWindowId": {
                  "type": "integer",
                  "minimum": 0
                },
                "oldPosition": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          ]
        },
        {
          "name": "onAttached",
          "type": "function",
          "description": "Fired when a tab is attached to a window, for example because it was moved between windows.",
          "parameters": [
            {
              "type": "integer",
              "name": "tabId",
              "minimum": 0
            },
            {
              "type": "object",
              "name": "attachInfo",
              "properties": {
                "newWindowId": {
                  "type": "integer",
                  "minimum": 0
                },
                "newPosition": {
                  "type": "integer",
                  "minimum": 0
                }
              }
            }
          ]
        },
        {
          "name": "onRemoved",
          "type": "function",
          "description": "Fired when a tab is closed.",
          "parameters": [
            {
              "type": "integer",
              "name": "tabId",
              "minimum": 0
            },
            {
              "type": "object",
              "name": "removeInfo",
              "properties": {
                "windowId": {
                  "type": "integer",
                  "minimum": 0,
                  "description": "The window whose tab is closed."
                },
                "isWindowClosing": {
                  "type": "boolean",
                  "description": "True when the tab is being closed because its window is being closed."
                }
              }
            }
          ]
        }
      ]
    }
  ],
  "windows.json": [
    {
      "namespace": "windows",
      "description": "Use the <code>browser.windows</code> API to interact with Thunderbird. You can use this API to create, modify, and rearrange windows.",
      "types": [
        {
          "id": "WindowType",
          "type": "string",
          "description": "The type of a window. Under some circumstances a Window may not be assigned a type property.",
          "enum": [
            "normal",
            "popup",
            "panel",
            "app",
            "devtools",
            "addressBook",
            "messageCompose",
            "messageDisplay"
          ]
        },
        {
          "id": "WindowState",
          "type": "string",
          "description": "The state of this window.",
          "enum": [
            "normal",
            "minimized",
            "maximized",
            "fullscreen",
            "docked"
          ]
        },
        {
          "id": "Window",
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "optional": true,
              "minimum": 0,
              "description": "The ID of the window. Window IDs are unique within a session."
            },
            "focused": {
              "type": "boolean",
              "description": "Whether the window is currently the focused window."
            },
            "top": {
              "type": "integer",
              "optional": true,
              "description": "The offset of the window from the top edge of the screen in pixels."
            },
            "left": {
              "type": "integer",
              "optional": true,
              "description": "The offset of the window from the left edge of the screen in pixels."
            },
            "width": {
              "type": "integer",
              "optional": true,
              "description": "The width of the window, including the frame, in pixels."
            },
            "height": {
              "type": "integer",
              "optional": true,
              "description": "The height of the window, including the frame, in pixels."
            },
            "tabs": {
              "type": "array",
              "items": {
                "$ref": "tabs.Tab"
              },
              "optional": true,
              "description": "Array of :ref:`tabs.Tab` objects representing the current tabs in the window. Only included if requested by :ref:`windows.get`, :ref:`windows.getCurrent`, :ref:`windows.getAll` or :ref:`windows.getLastFocused` and the optional :ref:`windows.GetInfo` parameter has ``populate`` set to ``true``."
            },
            "incognito": {
              "type": "boolean",
              "description": "Whether the window is incognito."
            },
            "type": {
              "$ref": "WindowType",
              "optional": true,
              "description": "The type of browser window this is."
            },
            "state": {
              "$ref": "WindowState",
              "optional": true,
              "description": "The state of this browser window."
            },
            "alwaysOnTop": {
              "type": "boolean",
              "description": "Whether the window is set to be always on top."
            },
            "title": {
              "type": "string",
              "optional": true,
              "description": "The title of the window. Read-only."
            }
          }
        },
        {
          "id": "CreateType",
          "type": "string",
          "description": "Specifies what type of browser window to create. The 'panel' and 'detached_panel' types create a popup unless the '--enable-panels' flag is set.",
          "enum": [
            "normal",
            "popup",
            "panel",
            "detached_panel"
          ]
        },
        {
          "id": "GetInfo",
          "type": "object",
          "description": "Specifies additional requirements for the returned windows.",
          "properties": {
            "populate": {
              "type": "boolean",
              "optional": true,
              "description": "If true, the :ref:`windows.Window` returned will have a <var>tabs</var> property that contains an array of :ref:`tabs.Tab` objects representing the tabs inside the window. The :ref:`tabs.Tab` objects only contain the <code>url</code>, <code>title</code> and <code>favIconUrl</code> properties if the extension's manifest file includes the <permission>tabs</permission> permission."
            },
            "windowTypes": {
              "type": "array",
              "items": {
                "$ref": "WindowType"
              },
              "optional": true,
              "description": "If set, the :ref:`windows.Window` returned will be filtered based on its type. Supported by :ref:`windows.getAll` only, ignored in all other functions."
            }
          }
        }
      ],
      "properties": {
        "WINDOW_ID_NONE": {
          "value": -1,
          "description": "The windowId value that represents the absence of a window."
        },
        "WINDOW_ID_CURRENT": {
          "value": -2,
          "description": "The windowId value that represents the current window."
        }
      },
      "functions": [
        {
          "name": "get",
          "type": "function",
          "description": "Gets details about a window.",
          "async": "callback",
          "parameters": [
            {
              "type": "integer",
              "name": "windowId",
              "minimum": -2
            },
            {
              "$ref": "GetInfo",
              "name": "getInfo",
              "optional": true
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "window",
                  "$ref": "Window"
                }
              ]
            }
          ]
        },
        {
          "name": "getCurrent",
          "type": "function",
          "description": "Gets the current window.",
          "async": "callback",
          "parameters": [
            {
              "$ref": "GetInfo",
              "name": "getInfo",
              "optional": true
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "window",
                  "$ref": "Window"
                }
              ]
            }
          ]
        },
        {
          "name": "getLastFocused",
          "type": "function",
          "description": "Gets the window that was most recently focused &mdash; typically the window 'on top'.",
          "async": "callback",
          "parameters": [
            {
              "$ref": "GetInfo",
              "name": "getInfo",
              "optional": true
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "window",
                  "$ref": "Window"
                }
              ]
            }
          ]
        },
        {
          "name": "getAll",
          "type": "function",
          "description": "Gets all windows.",
          "async": "callback",
          "parameters": [
            {
              "$ref": "GetInfo",
              "name": "getInfo",
              "optional": true
            },
            {
              "type": "function",
              "name": "callback",
              "parameters": [
                {
                  "name": "windows",
                  "type": "array",
                  "items": {
                    "$ref": "Window"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "create",
          "type": "function",
          "description": "Creates (opens) a new browser with any optional sizing, position or default URL provided.",
          "async": "callback",
          "parameters": [
            {
              "type": "object",
              "name": "createData",
              "optional": true,
              "default": {},
              "properties": {
                "url": {
                  "description": "A URL or array of URLs to open as tabs in the window. Fully-qualified URLs must include a scheme (i.e. 'http://www.google.com', not 'www.google.com'). Relative URLs will be relative to the current page within the extension. Defaults to the New Tab Page.",
                  "optional": true,
                  "choices": [
                    {
                      "type": "string",
                      "format": "relativeUrl"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "format": "relativeUrl"
                      }
                    }
                  ]
                },
                "tabId": {
                  "type": "integer",
                  "minimum": 0,
                  "optional": true,
                  "description": "The id of the tab for which you want to adopt to the new window."
                },
                "left": {
                  "type": "integer",
                  "optional": true,
                  "description": "The number of pixels to position the new window from the left edge of the screen. If not specified, the new window is offset naturally from the last focused window. This value is ignored for panels."
                },
                "top": {
                  "type": "integer",
                  "optional": true,
                  "description": "The number of pixels to position the new window from the top edge of the screen. If not specified, the new window is offset naturally from the last focused window. This value is ignored for panels."
                },
                "width": {
                  "type": "integer",
                  "minimum": 0,
                  "optional": true,
                  "description": "The width in pixels of the new window, including the frame. If not specified defaults to a natural width."
                },
                "height": {
                  "type": "integer",
                  "minimum": 0,
                  "optional": true,
                  "description": "The height in pixels of the new window, including the frame. If not specified defaults to a natural height."
                },
                "focused": {
                  "unsupported": true,
                  "type": "boolean",
                  "optional": true,
                  "description": "If true, opens an active window. If false, opens an inactive window."
                },
                "incognito": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Whether the new window should be an incognito window."
                },
                "type": {
                  "$ref": "CreateType",
                  "optional": true,
                  "description": "Specifies what type of browser window to create. The 'panel' and 'detached_panel' types create a popup unless the '--enable-panels' flag is set."
                },
                "state": {
                  "$ref": "WindowState",
                  "optional": true,
                  "description": "The initial state of the window. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'."
                },
                "allowScriptsToClose": {
                  "type": "boolean",
                  "optional": true,
                  "description": "Allow scripts to close the window."
                },
                "titlePreface": {
                  "type": "string",
                  "optional": true,
                  "description": "A string to add to the beginning of the window title."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "name": "window",
                  "$ref": "Window",
                  "description": "Contains details about the created window.",
                  "optional": true
                }
              ]
            }
          ]
        },
        {
          "name": "update",
          "type": "function",
          "description": "Updates the properties of a window. Specify only the properties that you want to change; unspecified properties will be left unchanged.",
          "async": "callback",
          "parameters": [
            {
              "type": "integer",
              "name": "windowId",
              "minimum": -2
            },
            {
              "type": "object",
              "name": "updateInfo",
              "properties": {
                "left": {
                  "type": "integer",
                  "optional": true,
                  "description": "The offset from the left edge of the screen to move the window to in pixels. This value is ignored for panels."
                },
                "top": {
                  "type": "integer",
                  "optional": true,
                  "description": "The offset from the top edge of the screen to move the window to in pixels. This value is ignored for panels."
                },
                "width": {
                  "type": "integer",
                  "minimum": 0,
                  "optional": true,
                  "description": "The width to resize the window to in pixels. This value is ignored for panels."
                },
                "height": {
                  "type": "integer",
                  "minimum": 0,
                  "optional": true,
                  "description": "The height to resize the window to in pixels. This value is ignored for panels."
                },
                "focused": {
                  "type": "boolean",
                  "optional": true,
                  "description": "If true, brings the window to the front. If false, brings the next window in the z-order to the front."
                },
                "drawAttention": {
                  "type": "boolean",
                  "optional": true,
                  "description": "If true, causes the window to be displayed in a manner that draws the user's attention to the window, without changing the focused window. The effect lasts until the user changes focus to the window. This option has no effect if the window already has focus. Set to false to cancel a previous draw attention request."
                },
                "state": {
                  "$ref": "WindowState",
                  "optional": true,
                  "description": "The new state of the window. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined with 'left', 'top', 'width' or 'height'."
                },
                "titlePreface": {
                  "type": "string",
                  "optional": true,
                  "description": "A string to add to the beginning of the window title."
                }
              }
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": [
                {
                  "name": "window",
                  "$ref": "Window"
                }
              ]
            }
          ]
        },
        {
          "name": "remove",
          "type": "function",
          "description": "Removes (closes) a window, and all the tabs inside it.",
          "async": "callback",
          "parameters": [
            {
              "type": "integer",
              "name": "windowId",
              "minimum": -2
            },
            {
              "type": "function",
              "name": "callback",
              "optional": true,
              "parameters": []
            }
          ]
        },
        {
          "name": "openDefaultBrowser",
          "type": "function",
          "description": "Opens the provided URL in the default system browser.",
          "async": true,
          "parameters": [
            {
              "type": "string",
              "name": "url"
            }
          ]
        }
      ],
      "events": [
        {
          "name": "onCreated",
          "type": "function",
          "description": "Fired when a window is created.",
          "filters": [
            {
              "name": "windowTypes",
              "type": "array",
              "items": {
                "$ref": "WindowType"
              },
              "description": "Conditions that the window's type being created must satisfy. By default it will satisfy <code>['app', 'normal', 'panel', 'popup']</code>, with <code>'app'</code> and <code>'panel'</code> window types limited to the extension's own windows."
            }
          ],
          "parameters": [
            {
              "$ref": "Window",
              "name": "window",
              "description": "Details of the window that was created."
            }
          ]
        },
        {
          "name": "onRemoved",
          "type": "function",
          "description": "Fired when a window is removed (closed).",
          "filters": [
            {
              "name": "windowTypes",
              "type": "array",
              "items": {
                "$ref": "WindowType"
              },
              "description": "Conditions that the window's type being removed must satisfy. By default it will satisfy <code>['app', 'normal', 'panel', 'popup']</code>, with <code>'app'</code> and <code>'panel'</code> window types limited to the extension's own windows."
            }
          ],
          "parameters": [
            {
              "type": "integer",
              "name": "windowId",
              "minimum": 0,
              "description": "ID of the removed window."
            }
          ]
        },
        {
          "name": "onFocusChanged",
          "type": "function",
          "description": "Fired when the currently focused window changes. Will be :ref:`windows.WINDOW_ID_NONE`) if all browser windows have lost focus. Note: On some Linux window managers, WINDOW_ID_NONE will always be sent immediately preceding a switch from one browser window to another.",
          "filters": [
            {
              "name": "windowTypes",
              "type": "array",
              "items": {
                "$ref": "WindowType"
              },
              "description": "Conditions that the window's type being removed must satisfy. By default it will satisfy <code>['app', 'normal', 'panel', 'popup']</code>, with <code>'app'</code> and <code>'panel'</code> window types limited to the extension's own windows."
            }
          ],
          "parameters": [
            {
              "type": "integer",
              "name": "windowId",
              "minimum": -1,
              "description": "ID of the newly focused window."
            }
          ]
        }
      ]
    }
  ]
}
